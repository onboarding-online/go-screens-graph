/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// LabelPosition Position of label
type LabelPosition string

// List of LabelPosition
const (
	LABELPOSITION_LEFT LabelPosition = "left"
	LABELPOSITION_RIGHT LabelPosition = "right"
	LABELPOSITION_CENTER LabelPosition = "center"
)

// All allowed values of LabelPosition enum
var AllowedLabelPositionEnumValues = []LabelPosition{
	"left",
	"right",
	"center",
}

func (v *LabelPosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LabelPosition(value)
	for _, existing := range AllowedLabelPositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LabelPosition", value)
}

// NewLabelPositionFromValue returns a pointer to a valid LabelPosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLabelPositionFromValue(v string) (*LabelPosition, error) {
	ev := LabelPosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LabelPosition: valid values are %v", v, AllowedLabelPositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LabelPosition) IsValid() bool {
	for _, existing := range AllowedLabelPositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LabelPosition value
func (v LabelPosition) Ptr() *LabelPosition {
	return &v
}

type NullableLabelPosition struct {
	value *LabelPosition
	isSet bool
}

func (v NullableLabelPosition) Get() *LabelPosition {
	return v.value
}

func (v *NullableLabelPosition) Set(val *LabelPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelPosition(val *LabelPosition) *NullableLabelPosition {
	return &NullableLabelPosition{value: val, isSet: true}
}

func (v NullableLabelPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

