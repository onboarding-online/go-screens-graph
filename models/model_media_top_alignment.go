/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MediaTopAlignment Media top alignment
type MediaTopAlignment string

// List of MediaTopAlignment
const (
	MEDIATOPALIGNMENT_TOP MediaTopAlignment = "top"
	MEDIATOPALIGNMENT_SAFE_AREA MediaTopAlignment = "safeArea"
	MEDIATOPALIGNMENT_NAVIGATION_BAR MediaTopAlignment = "navigationBar"
)

// All allowed values of MediaTopAlignment enum
var AllowedMediaTopAlignmentEnumValues = []MediaTopAlignment{
	"top",
	"safeArea",
	"navigationBar",
}

func (v *MediaTopAlignment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaTopAlignment(value)
	for _, existing := range AllowedMediaTopAlignmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaTopAlignment", value)
}

// NewMediaTopAlignmentFromValue returns a pointer to a valid MediaTopAlignment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaTopAlignmentFromValue(v string) (*MediaTopAlignment, error) {
	ev := MediaTopAlignment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaTopAlignment: valid values are %v", v, AllowedMediaTopAlignmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaTopAlignment) IsValid() bool {
	for _, existing := range AllowedMediaTopAlignmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaTopAlignment value
func (v MediaTopAlignment) Ptr() *MediaTopAlignment {
	return &v
}

type NullableMediaTopAlignment struct {
	value *MediaTopAlignment
	isSet bool
}

func (v NullableMediaTopAlignment) Get() *MediaTopAlignment {
	return v.value
}

func (v *NullableMediaTopAlignment) Set(val *MediaTopAlignment) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaTopAlignment) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaTopAlignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaTopAlignment(val *MediaTopAlignment) *NullableMediaTopAlignment {
	return &NullableMediaTopAlignment{value: val, isSet: true}
}

func (v NullableMediaTopAlignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaTopAlignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

