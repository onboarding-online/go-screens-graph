/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ButtonVisibility Button visibility
type ButtonVisibility string

// List of ButtonVisibility
const (
	BUTTONVISIBILITY_DEFAULT ButtonVisibility = "default"
	BUTTONVISIBILITY_DISABLED_UNTIL_VALUE_ENTERED ButtonVisibility = "disabledUntilValueEntered"
	BUTTONVISIBILITY_HIDDEN_UNTIL_VALUE_ENTERED ButtonVisibility = "hiddenUntilValueEntered"
)

// All allowed values of ButtonVisibility enum
var AllowedButtonVisibilityEnumValues = []ButtonVisibility{
	"default",
	"disabledUntilValueEntered",
	"hiddenUntilValueEntered",
}

func (v *ButtonVisibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ButtonVisibility(value)
	for _, existing := range AllowedButtonVisibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ButtonVisibility", value)
}

// NewButtonVisibilityFromValue returns a pointer to a valid ButtonVisibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewButtonVisibilityFromValue(v string) (*ButtonVisibility, error) {
	ev := ButtonVisibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ButtonVisibility: valid values are %v", v, AllowedButtonVisibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ButtonVisibility) IsValid() bool {
	for _, existing := range AllowedButtonVisibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ButtonVisibility value
func (v ButtonVisibility) Ptr() *ButtonVisibility {
	return &v
}

type NullableButtonVisibility struct {
	value *ButtonVisibility
	isSet bool
}

func (v NullableButtonVisibility) Get() *ButtonVisibility {
	return v.value
}

func (v *NullableButtonVisibility) Set(val *ButtonVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableButtonVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableButtonVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableButtonVisibility(val *ButtonVisibility) *NullableButtonVisibility {
	return &NullableButtonVisibility{value: val, isSet: true}
}

func (v NullableButtonVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableButtonVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

