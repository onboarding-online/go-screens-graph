/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// BaseDividerBlock Styles for divider
type BaseDividerBlock struct {
	Color *string `json:"color,omitempty"`
	Height *float32 `json:"height,omitempty"`
}

// NewBaseDividerBlock instantiates a new BaseDividerBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseDividerBlock() *BaseDividerBlock {
	this := BaseDividerBlock{}
	return &this
}

// NewBaseDividerBlockWithDefaults instantiates a new BaseDividerBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseDividerBlockWithDefaults() *BaseDividerBlock {
	this := BaseDividerBlock{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *BaseDividerBlock) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseDividerBlock) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *BaseDividerBlock) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *BaseDividerBlock) SetColor(v string) {
	o.Color = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *BaseDividerBlock) GetHeight() float32 {
	if o == nil || isNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseDividerBlock) GetHeightOk() (*float32, bool) {
	if o == nil || isNil(o.Height) {
    return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *BaseDividerBlock) HasHeight() bool {
	if o != nil && !isNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *BaseDividerBlock) SetHeight(v float32) {
	o.Height = &v
}

func (o BaseDividerBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}

type NullableBaseDividerBlock struct {
	value *BaseDividerBlock
	isSet bool
}

func (v NullableBaseDividerBlock) Get() *BaseDividerBlock {
	return v.value
}

func (v *NullableBaseDividerBlock) Set(val *BaseDividerBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseDividerBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseDividerBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseDividerBlock(val *BaseDividerBlock) *NullableBaseDividerBlock {
	return &NullableBaseDividerBlock{value: val, isSet: true}
}

func (v NullableBaseDividerBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseDividerBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


