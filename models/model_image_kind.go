/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ImageKind Image kind
type ImageKind string

// List of ImageKind
const (
	IMAGEKIND_IMAGE_KIND1 ImageKind = "ImageKind1"
	IMAGEKIND_IMAGE_KIND2 ImageKind = "ImageKind2"
	IMAGEKIND_IMAGE_KIND3 ImageKind = "ImageKind3"
	IMAGEKIND_IMAGE_KIND4 ImageKind = "ImageKind4"
	IMAGEKIND_IMAGE_KIND5 ImageKind = "ImageKind5"
)

// All allowed values of ImageKind enum
var AllowedImageKindEnumValues = []ImageKind{
	"ImageKind1",
	"ImageKind2",
	"ImageKind3",
	"ImageKind4",
	"ImageKind5",
}

func (v *ImageKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageKind(value)
	for _, existing := range AllowedImageKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageKind", value)
}

// NewImageKindFromValue returns a pointer to a valid ImageKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageKindFromValue(v string) (*ImageKind, error) {
	ev := ImageKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageKind: valid values are %v", v, AllowedImageKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageKind) IsValid() bool {
	for _, existing := range AllowedImageKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageKind value
func (v ImageKind) Ptr() *ImageKind {
	return &v
}

type NullableImageKind struct {
	value *ImageKind
	isSet bool
}

func (v NullableImageKind) Get() *ImageKind {
	return v.value
}

func (v *NullableImageKind) Set(val *ImageKind) {
	v.value = val
	v.isSet = true
}

func (v NullableImageKind) IsSet() bool {
	return v.isSet
}

func (v *NullableImageKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageKind(val *ImageKind) *NullableImageKind {
	return &NullableImageKind{value: val, isSet: true}
}

func (v NullableImageKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

