/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// RegularListItemBlockElement Possible elements on regular list
type RegularListItemBlockElement string

// List of RegularListItemBlockElement
const (
	REGULARLISTITEMBLOCKELEMENT_IMAGE RegularListItemBlockElement = "Image"
	REGULARLISTITEMBLOCKELEMENT_TITLE RegularListItemBlockElement = "Title"
)

// All allowed values of RegularListItemBlockElement enum
var AllowedRegularListItemBlockElementEnumValues = []RegularListItemBlockElement{
	"Image",
	"Title",
}

func (v *RegularListItemBlockElement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegularListItemBlockElement(value)
	for _, existing := range AllowedRegularListItemBlockElementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegularListItemBlockElement", value)
}

// NewRegularListItemBlockElementFromValue returns a pointer to a valid RegularListItemBlockElement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegularListItemBlockElementFromValue(v string) (*RegularListItemBlockElement, error) {
	ev := RegularListItemBlockElement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegularListItemBlockElement: valid values are %v", v, AllowedRegularListItemBlockElementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegularListItemBlockElement) IsValid() bool {
	for _, existing := range AllowedRegularListItemBlockElementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegularListItemBlockElement value
func (v RegularListItemBlockElement) Ptr() *RegularListItemBlockElement {
	return &v
}

type NullableRegularListItemBlockElement struct {
	value *RegularListItemBlockElement
	isSet bool
}

func (v NullableRegularListItemBlockElement) Get() *RegularListItemBlockElement {
	return v.value
}

func (v *NullableRegularListItemBlockElement) Set(val *RegularListItemBlockElement) {
	v.value = val
	v.isSet = true
}

func (v NullableRegularListItemBlockElement) IsSet() bool {
	return v.isSet
}

func (v *NullableRegularListItemBlockElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegularListItemBlockElement(val *RegularListItemBlockElement) *NullableRegularListItemBlockElement {
	return &NullableRegularListItemBlockElement{value: val, isSet: true}
}

func (v NullableRegularListItemBlockElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegularListItemBlockElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

