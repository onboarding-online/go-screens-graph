/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Slider Slider
type Slider struct {
	Kind SliderKind `json:"kind"`
	Timer ElementTimer `json:"timer"`
	// Sections for slider
	Items []SliderItem `json:"items"`
	Styles SliderBlock `json:"styles"`
	Box Box `json:"box"`
}

// NewSlider instantiates a new Slider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlider(kind SliderKind, timer ElementTimer, items []SliderItem, styles SliderBlock, box Box) *Slider {
	this := Slider{}
	this.Kind = kind
	this.Timer = timer
	this.Items = items
	this.Styles = styles
	this.Box = box
	return &this
}

// NewSliderWithDefaults instantiates a new Slider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliderWithDefaults() *Slider {
	this := Slider{}
	return &this
}

// GetKind returns the Kind field value
func (o *Slider) GetKind() SliderKind {
	if o == nil {
		var ret SliderKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Slider) GetKindOk() (*SliderKind, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Slider) SetKind(v SliderKind) {
	o.Kind = v
}

// GetTimer returns the Timer field value
func (o *Slider) GetTimer() ElementTimer {
	if o == nil {
		var ret ElementTimer
		return ret
	}

	return o.Timer
}

// GetTimerOk returns a tuple with the Timer field value
// and a boolean to check if the value has been set.
func (o *Slider) GetTimerOk() (*ElementTimer, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Timer, true
}

// SetTimer sets field value
func (o *Slider) SetTimer(v ElementTimer) {
	o.Timer = v
}

// GetItems returns the Items field value
func (o *Slider) GetItems() []SliderItem {
	if o == nil {
		var ret []SliderItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *Slider) GetItemsOk() ([]SliderItem, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *Slider) SetItems(v []SliderItem) {
	o.Items = v
}

// GetStyles returns the Styles field value
func (o *Slider) GetStyles() SliderBlock {
	if o == nil {
		var ret SliderBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *Slider) GetStylesOk() (*SliderBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *Slider) SetStyles(v SliderBlock) {
	o.Styles = v
}

// GetBox returns the Box field value
func (o *Slider) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *Slider) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *Slider) SetBox(v Box) {
	o.Box = v
}

func (o Slider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["timer"] = o.Timer
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["box"] = o.Box
	}
	return json.Marshal(toSerialize)
}

type NullableSlider struct {
	value *Slider
	isSet bool
}

func (v NullableSlider) Get() *Slider {
	return v.value
}

func (v *NullableSlider) Set(val *Slider) {
	v.value = val
	v.isSet = true
}

func (v NullableSlider) IsSet() bool {
	return v.isSet
}

func (v *NullableSlider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlider(val *Slider) *NullableSlider {
	return &NullableSlider{value: val, isSet: true}
}

func (v NullableSlider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


