/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FieldSubtype Possible field subtype
type FieldSubtype string

// List of FieldSubtype
const (
	FIELDSUBTYPE_EMAIL FieldSubtype = "Email"
	FIELDSUBTYPE_BIRTH_DATE FieldSubtype = "BirthDate"
	FIELDSUBTYPE_HEIGHT FieldSubtype = "Height"
	FIELDSUBTYPE_WEIGHT FieldSubtype = "Weight"
)

// All allowed values of FieldSubtype enum
var AllowedFieldSubtypeEnumValues = []FieldSubtype{
	"Email",
	"BirthDate",
	"Height",
	"Weight",
}

func (v *FieldSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldSubtype(value)
	for _, existing := range AllowedFieldSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldSubtype", value)
}

// NewFieldSubtypeFromValue returns a pointer to a valid FieldSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldSubtypeFromValue(v string) (*FieldSubtype, error) {
	ev := FieldSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldSubtype: valid values are %v", v, AllowedFieldSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldSubtype) IsValid() bool {
	for _, existing := range AllowedFieldSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldSubtype value
func (v FieldSubtype) Ptr() *FieldSubtype {
	return &v
}

type NullableFieldSubtype struct {
	value *FieldSubtype
	isSet bool
}

func (v NullableFieldSubtype) Get() *FieldSubtype {
	return v.value
}

func (v *NullableFieldSubtype) Set(val *FieldSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldSubtype(val *FieldSubtype) *NullableFieldSubtype {
	return &NullableFieldSubtype{value: val, isSet: true}
}

func (v NullableFieldSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

