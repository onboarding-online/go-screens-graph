/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// BaseButtonContent - Base button content
type BaseButtonContent struct {
	BaseImage *BaseImage
	BaseText *BaseText
}

// BaseImageAsBaseButtonContent is a convenience function that returns BaseImage wrapped in BaseButtonContent
func BaseImageAsBaseButtonContent(v *BaseImage) BaseButtonContent {
	return BaseButtonContent{
		BaseImage: v,
	}
}

// BaseTextAsBaseButtonContent is a convenience function that returns BaseText wrapped in BaseButtonContent
func BaseTextAsBaseButtonContent(v *BaseText) BaseButtonContent {
	return BaseButtonContent{
		BaseText: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BaseButtonContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BaseImage
	err = newStrictDecoder(data).Decode(&dst.BaseImage)
	if err == nil {
		jsonBaseImage, _ := json.Marshal(dst.BaseImage)
		if string(jsonBaseImage) == "{}" { // empty struct
			dst.BaseImage = nil
		} else {
			match++
		}
	} else {
		dst.BaseImage = nil
	}

	// try to unmarshal data into BaseText
	err = newStrictDecoder(data).Decode(&dst.BaseText)
	if err == nil {
		jsonBaseText, _ := json.Marshal(dst.BaseText)
		if string(jsonBaseText) == "{}" { // empty struct
			dst.BaseText = nil
		} else {
			match++
		}
	} else {
		dst.BaseText = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BaseImage = nil
		dst.BaseText = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BaseButtonContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BaseButtonContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BaseButtonContent) MarshalJSON() ([]byte, error) {
	if src.BaseImage != nil {
		return json.Marshal(&src.BaseImage)
	}

	if src.BaseText != nil {
		return json.Marshal(&src.BaseText)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BaseButtonContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BaseImage != nil {
		return obj.BaseImage
	}

	if obj.BaseText != nil {
		return obj.BaseText
	}

	// all schemas are nil
	return nil
}

type NullableBaseButtonContent struct {
	value *BaseButtonContent
	isSet bool
}

func (v NullableBaseButtonContent) Get() *BaseButtonContent {
	return v.value
}

func (v *NullableBaseButtonContent) Set(val *BaseButtonContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseButtonContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseButtonContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseButtonContent(val *BaseButtonContent) *NullableBaseButtonContent {
	return &NullableBaseButtonContent{value: val, isSet: true}
}

func (v NullableBaseButtonContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseButtonContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


