/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PickerOptions - Picker options
type PickerOptions struct {
	PickerListOptions *PickerListOptions
	PickerRangeOptions *PickerRangeOptions
}

// PickerListOptionsAsPickerOptions is a convenience function that returns PickerListOptions wrapped in PickerOptions
func PickerListOptionsAsPickerOptions(v *PickerListOptions) PickerOptions {
	return PickerOptions{
		PickerListOptions: v,
	}
}

// PickerRangeOptionsAsPickerOptions is a convenience function that returns PickerRangeOptions wrapped in PickerOptions
func PickerRangeOptionsAsPickerOptions(v *PickerRangeOptions) PickerOptions {
	return PickerOptions{
		PickerRangeOptions: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PickerOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PickerListOptions
	err = newStrictDecoder(data).Decode(&dst.PickerListOptions)
	if err == nil {
		jsonPickerListOptions, _ := json.Marshal(dst.PickerListOptions)
		if string(jsonPickerListOptions) == "{}" { // empty struct
			dst.PickerListOptions = nil
		} else {
			match++
		}
	} else {
		dst.PickerListOptions = nil
	}

	// try to unmarshal data into PickerRangeOptions
	err = newStrictDecoder(data).Decode(&dst.PickerRangeOptions)
	if err == nil {
		jsonPickerRangeOptions, _ := json.Marshal(dst.PickerRangeOptions)
		if string(jsonPickerRangeOptions) == "{}" { // empty struct
			dst.PickerRangeOptions = nil
		} else {
			match++
		}
	} else {
		dst.PickerRangeOptions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PickerListOptions = nil
		dst.PickerRangeOptions = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PickerOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PickerOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PickerOptions) MarshalJSON() ([]byte, error) {
	if src.PickerListOptions != nil {
		return json.Marshal(&src.PickerListOptions)
	}

	if src.PickerRangeOptions != nil {
		return json.Marshal(&src.PickerRangeOptions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PickerOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PickerListOptions != nil {
		return obj.PickerListOptions
	}

	if obj.PickerRangeOptions != nil {
		return obj.PickerRangeOptions
	}

	// all schemas are nil
	return nil
}

type NullablePickerOptions struct {
	value *PickerOptions
	isSet bool
}

func (v NullablePickerOptions) Get() *PickerOptions {
	return v.value
}

func (v *NullablePickerOptions) Set(val *PickerOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePickerOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePickerOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickerOptions(val *PickerOptions) *NullablePickerOptions {
	return &NullablePickerOptions{value: val, isSet: true}
}

func (v NullablePickerOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickerOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


