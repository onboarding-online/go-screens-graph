/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TwoColumnSingleSelectionListItemType Combination of fields for two column single selection list item
type TwoColumnSingleSelectionListItemType string

// List of TwoColumnSingleSelectionListItemType
const (
	TWOCOLUMNSINGLESELECTIONLISTITEMTYPE_TITTLE TwoColumnSingleSelectionListItemType = "Tittle"
	TWOCOLUMNSINGLESELECTIONLISTITEMTYPE_TITLE_SUBTITLE TwoColumnSingleSelectionListItemType = "TitleSubtitle"
	TWOCOLUMNSINGLESELECTIONLISTITEMTYPE_SMALL_IMAGE_TITLE TwoColumnSingleSelectionListItemType = "SmallImageTitle"
	TWOCOLUMNSINGLESELECTIONLISTITEMTYPE_MEDIUM_IMAGE_TITLE TwoColumnSingleSelectionListItemType = "MediumImageTitle"
	TWOCOLUMNSINGLESELECTIONLISTITEMTYPE_FULL_IMAGE TwoColumnSingleSelectionListItemType = "FullImage"
	TWOCOLUMNSINGLESELECTIONLISTITEMTYPE_BIG_IMAGE_TITLE TwoColumnSingleSelectionListItemType = "BigImageTitle"
)

// All allowed values of TwoColumnSingleSelectionListItemType enum
var AllowedTwoColumnSingleSelectionListItemTypeEnumValues = []TwoColumnSingleSelectionListItemType{
	"Tittle",
	"TitleSubtitle",
	"SmallImageTitle",
	"MediumImageTitle",
	"FullImage",
	"BigImageTitle",
}

func (v *TwoColumnSingleSelectionListItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TwoColumnSingleSelectionListItemType(value)
	for _, existing := range AllowedTwoColumnSingleSelectionListItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TwoColumnSingleSelectionListItemType", value)
}

// NewTwoColumnSingleSelectionListItemTypeFromValue returns a pointer to a valid TwoColumnSingleSelectionListItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTwoColumnSingleSelectionListItemTypeFromValue(v string) (*TwoColumnSingleSelectionListItemType, error) {
	ev := TwoColumnSingleSelectionListItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TwoColumnSingleSelectionListItemType: valid values are %v", v, AllowedTwoColumnSingleSelectionListItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TwoColumnSingleSelectionListItemType) IsValid() bool {
	for _, existing := range AllowedTwoColumnSingleSelectionListItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TwoColumnSingleSelectionListItemType value
func (v TwoColumnSingleSelectionListItemType) Ptr() *TwoColumnSingleSelectionListItemType {
	return &v
}

type NullableTwoColumnSingleSelectionListItemType struct {
	value *TwoColumnSingleSelectionListItemType
	isSet bool
}

func (v NullableTwoColumnSingleSelectionListItemType) Get() *TwoColumnSingleSelectionListItemType {
	return v.value
}

func (v *NullableTwoColumnSingleSelectionListItemType) Set(val *TwoColumnSingleSelectionListItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableTwoColumnSingleSelectionListItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableTwoColumnSingleSelectionListItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwoColumnSingleSelectionListItemType(val *TwoColumnSingleSelectionListItemType) *NullableTwoColumnSingleSelectionListItemType {
	return &NullableTwoColumnSingleSelectionListItemType{value: val, isSet: true}
}

func (v NullableTwoColumnSingleSelectionListItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwoColumnSingleSelectionListItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

