/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ConditionedAction Conditioned action
type ConditionedAction struct {
	// List of conditions
	Rule []Condition `json:"rule"`
	// Next screen id
	NextScreenId string `json:"nextScreenId"`
	TransitionKind ScreenTransitionKind `json:"transitionKind"`
}

// NewConditionedAction instantiates a new ConditionedAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionedAction(rule []Condition, nextScreenId string, transitionKind ScreenTransitionKind) *ConditionedAction {
	this := ConditionedAction{}
	this.Rule = rule
	this.NextScreenId = nextScreenId
	this.TransitionKind = transitionKind
	return &this
}

// NewConditionedActionWithDefaults instantiates a new ConditionedAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionedActionWithDefaults() *ConditionedAction {
	this := ConditionedAction{}
	return &this
}

// GetRule returns the Rule field value
func (o *ConditionedAction) GetRule() []Condition {
	if o == nil {
		var ret []Condition
		return ret
	}

	return o.Rule
}

// GetRuleOk returns a tuple with the Rule field value
// and a boolean to check if the value has been set.
func (o *ConditionedAction) GetRuleOk() ([]Condition, bool) {
	if o == nil {
    return nil, false
	}
	return o.Rule, true
}

// SetRule sets field value
func (o *ConditionedAction) SetRule(v []Condition) {
	o.Rule = v
}

// GetNextScreenId returns the NextScreenId field value
func (o *ConditionedAction) GetNextScreenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextScreenId
}

// GetNextScreenIdOk returns a tuple with the NextScreenId field value
// and a boolean to check if the value has been set.
func (o *ConditionedAction) GetNextScreenIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NextScreenId, true
}

// SetNextScreenId sets field value
func (o *ConditionedAction) SetNextScreenId(v string) {
	o.NextScreenId = v
}

// GetTransitionKind returns the TransitionKind field value
func (o *ConditionedAction) GetTransitionKind() ScreenTransitionKind {
	if o == nil {
		var ret ScreenTransitionKind
		return ret
	}

	return o.TransitionKind
}

// GetTransitionKindOk returns a tuple with the TransitionKind field value
// and a boolean to check if the value has been set.
func (o *ConditionedAction) GetTransitionKindOk() (*ScreenTransitionKind, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TransitionKind, true
}

// SetTransitionKind sets field value
func (o *ConditionedAction) SetTransitionKind(v ScreenTransitionKind) {
	o.TransitionKind = v
}

func (o ConditionedAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rule"] = o.Rule
	}
	if true {
		toSerialize["nextScreenId"] = o.NextScreenId
	}
	if true {
		toSerialize["transitionKind"] = o.TransitionKind
	}
	return json.Marshal(toSerialize)
}

type NullableConditionedAction struct {
	value *ConditionedAction
	isSet bool
}

func (v NullableConditionedAction) Get() *ConditionedAction {
	return v.value
}

func (v *NullableConditionedAction) Set(val *ConditionedAction) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionedAction) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionedAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionedAction(val *ConditionedAction) *NullableConditionedAction {
	return &NullableConditionedAction{value: val, isSet: true}
}

func (v NullableConditionedAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionedAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


