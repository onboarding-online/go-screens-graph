/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TooltipImagePosition Tooltip image position
type TooltipImagePosition string

// List of TooltipImagePosition
const (
	TOOLTIPIMAGEPOSITION_TOP TooltipImagePosition = "top"
	TOOLTIPIMAGEPOSITION_BOTTOM TooltipImagePosition = "bottom"
	TOOLTIPIMAGEPOSITION_LEFT TooltipImagePosition = "left"
	TOOLTIPIMAGEPOSITION_RIGHT TooltipImagePosition = "right"
)

// All allowed values of TooltipImagePosition enum
var AllowedTooltipImagePositionEnumValues = []TooltipImagePosition{
	"top",
	"bottom",
	"left",
	"right",
}

func (v *TooltipImagePosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TooltipImagePosition(value)
	for _, existing := range AllowedTooltipImagePositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TooltipImagePosition", value)
}

// NewTooltipImagePositionFromValue returns a pointer to a valid TooltipImagePosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTooltipImagePositionFromValue(v string) (*TooltipImagePosition, error) {
	ev := TooltipImagePosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TooltipImagePosition: valid values are %v", v, AllowedTooltipImagePositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TooltipImagePosition) IsValid() bool {
	for _, existing := range AllowedTooltipImagePositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TooltipImagePosition value
func (v TooltipImagePosition) Ptr() *TooltipImagePosition {
	return &v
}

type NullableTooltipImagePosition struct {
	value *TooltipImagePosition
	isSet bool
}

func (v NullableTooltipImagePosition) Get() *TooltipImagePosition {
	return v.value
}

func (v *NullableTooltipImagePosition) Set(val *TooltipImagePosition) {
	v.value = val
	v.isSet = true
}

func (v NullableTooltipImagePosition) IsSet() bool {
	return v.isSet
}

func (v *NullableTooltipImagePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTooltipImagePosition(val *TooltipImagePosition) *NullableTooltipImagePosition {
	return &NullableTooltipImagePosition{value: val, isSet: true}
}

func (v NullableTooltipImagePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTooltipImagePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

