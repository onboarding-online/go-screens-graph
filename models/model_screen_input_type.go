/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ScreenInputType Possible data types for input on screen
type ScreenInputType string

// List of ScreenInputType
const (
	SCREENINPUTTYPE_STRING ScreenInputType = "string"
	SCREENINPUTTYPE_INT ScreenInputType = "int"
	SCREENINPUTTYPE_DOUBLE ScreenInputType = "double"
	SCREENINPUTTYPE_DATE ScreenInputType = "date"
	SCREENINPUTTYPE_LIST_STRING ScreenInputType = "listString"
	SCREENINPUTTYPE_LIST_INT ScreenInputType = "listInt"
	SCREENINPUTTYPE_LIST_DOUBLE ScreenInputType = "listDouble"
	SCREENINPUTTYPE_LIST_DATE ScreenInputType = "listDate"
)

// All allowed values of ScreenInputType enum
var AllowedScreenInputTypeEnumValues = []ScreenInputType{
	"string",
	"int",
	"double",
	"date",
	"listString",
	"listInt",
	"listDouble",
	"listDate",
}

func (v *ScreenInputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScreenInputType(value)
	for _, existing := range AllowedScreenInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScreenInputType", value)
}

// NewScreenInputTypeFromValue returns a pointer to a valid ScreenInputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScreenInputTypeFromValue(v string) (*ScreenInputType, error) {
	ev := ScreenInputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScreenInputType: valid values are %v", v, AllowedScreenInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScreenInputType) IsValid() bool {
	for _, existing := range AllowedScreenInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScreenInputType value
func (v ScreenInputType) Ptr() *ScreenInputType {
	return &v
}

type NullableScreenInputType struct {
	value *ScreenInputType
	isSet bool
}

func (v NullableScreenInputType) Get() *ScreenInputType {
	return v.value
}

func (v *NullableScreenInputType) Set(val *ScreenInputType) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenInputType(val *ScreenInputType) *NullableScreenInputType {
	return &NullableScreenInputType{value: val, isSet: true}
}

func (v NullableScreenInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

