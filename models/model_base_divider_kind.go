/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// BaseDividerKind Kind of divider
type BaseDividerKind string

// List of BaseDividerKind
const (
	BASEDIVIDERKIND_DEFAULT BaseDividerKind = "Default"
	BASEDIVIDERKIND_BASE_DIVIDER_KIND1 BaseDividerKind = "BaseDividerKind1"
	BASEDIVIDERKIND_BASE_DIVIDER_KIND2 BaseDividerKind = "BaseDividerKind2"
	BASEDIVIDERKIND_BASE_DIVIDER_KIND3 BaseDividerKind = "BaseDividerKind3"
	BASEDIVIDERKIND_BASE_DIVIDER_KIND4 BaseDividerKind = "BaseDividerKind4"
	BASEDIVIDERKIND_BASE_DIVIDER_KIND5 BaseDividerKind = "BaseDividerKind5"
)

// All allowed values of BaseDividerKind enum
var AllowedBaseDividerKindEnumValues = []BaseDividerKind{
	"Default",
	"BaseDividerKind1",
	"BaseDividerKind2",
	"BaseDividerKind3",
	"BaseDividerKind4",
	"BaseDividerKind5",
}

func (v *BaseDividerKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BaseDividerKind(value)
	for _, existing := range AllowedBaseDividerKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BaseDividerKind", value)
}

// NewBaseDividerKindFromValue returns a pointer to a valid BaseDividerKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBaseDividerKindFromValue(v string) (*BaseDividerKind, error) {
	ev := BaseDividerKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BaseDividerKind: valid values are %v", v, AllowedBaseDividerKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BaseDividerKind) IsValid() bool {
	for _, existing := range AllowedBaseDividerKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BaseDividerKind value
func (v BaseDividerKind) Ptr() *BaseDividerKind {
	return &v
}

type NullableBaseDividerKind struct {
	value *BaseDividerKind
	isSet bool
}

func (v NullableBaseDividerKind) Get() *BaseDividerKind {
	return v.value
}

func (v *NullableBaseDividerKind) Set(val *BaseDividerKind) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseDividerKind) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseDividerKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseDividerKind(val *BaseDividerKind) *NullableBaseDividerKind {
	return &NullableBaseDividerKind{value: val, isSet: true}
}

func (v NullableBaseDividerKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseDividerKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

