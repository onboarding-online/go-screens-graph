/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PickerWheelKind Picker wheel kind
type PickerWheelKind string

// List of PickerWheelKind
const (
	PICKERWHEELKIND_LIST PickerWheelKind = "list"
	PICKERWHEELKIND_RANGE PickerWheelKind = "range"
)

// All allowed values of PickerWheelKind enum
var AllowedPickerWheelKindEnumValues = []PickerWheelKind{
	"list",
	"range",
}

func (v *PickerWheelKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PickerWheelKind(value)
	for _, existing := range AllowedPickerWheelKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PickerWheelKind", value)
}

// NewPickerWheelKindFromValue returns a pointer to a valid PickerWheelKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPickerWheelKindFromValue(v string) (*PickerWheelKind, error) {
	ev := PickerWheelKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PickerWheelKind: valid values are %v", v, AllowedPickerWheelKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PickerWheelKind) IsValid() bool {
	for _, existing := range AllowedPickerWheelKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PickerWheelKind value
func (v PickerWheelKind) Ptr() *PickerWheelKind {
	return &v
}

type NullablePickerWheelKind struct {
	value *PickerWheelKind
	isSet bool
}

func (v NullablePickerWheelKind) Get() *PickerWheelKind {
	return v.value
}

func (v *NullablePickerWheelKind) Set(val *PickerWheelKind) {
	v.value = val
	v.isSet = true
}

func (v NullablePickerWheelKind) IsSet() bool {
	return v.isSet
}

func (v *NullablePickerWheelKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickerWheelKind(val *PickerWheelKind) *NullablePickerWheelKind {
	return &NullablePickerWheelKind{value: val, isSet: true}
}

func (v NullablePickerWheelKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickerWheelKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

