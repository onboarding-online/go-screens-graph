/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PageIndicatorKind Page indicator kind
type PageIndicatorKind string

// List of PageIndicatorKind
const (
	PAGEINDICATORKIND_LINE PageIndicatorKind = "Line"
	PAGEINDICATORKIND_DASHES PageIndicatorKind = "Dashes"
	PAGEINDICATORKIND_DASHES_WITH_TITLE PageIndicatorKind = "DashesWithTitle"
	PAGEINDICATORKIND_DASHES_WITH_IMAGE PageIndicatorKind = "DashesWithImage"
	PAGEINDICATORKIND_DASHES_WITH_TITLE_IMAGE PageIndicatorKind = "DashesWithTitleImage"
	PAGEINDICATORKIND_PAGE_INDICATOR_KIND1 PageIndicatorKind = "PageIndicatorKind1"
	PAGEINDICATORKIND_PAGE_INDICATOR_KIND2 PageIndicatorKind = "PageIndicatorKind2"
	PAGEINDICATORKIND_PAGE_INDICATOR_KIND3 PageIndicatorKind = "PageIndicatorKind3"
	PAGEINDICATORKIND_PAGE_INDICATOR_KIND4 PageIndicatorKind = "PageIndicatorKind4"
	PAGEINDICATORKIND_PAGE_INDICATOR_KIND5 PageIndicatorKind = "PageIndicatorKind5"
)

// All allowed values of PageIndicatorKind enum
var AllowedPageIndicatorKindEnumValues = []PageIndicatorKind{
	"Line",
	"Dashes",
	"DashesWithTitle",
	"DashesWithImage",
	"DashesWithTitleImage",
	"PageIndicatorKind1",
	"PageIndicatorKind2",
	"PageIndicatorKind3",
	"PageIndicatorKind4",
	"PageIndicatorKind5",
}

func (v *PageIndicatorKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PageIndicatorKind(value)
	for _, existing := range AllowedPageIndicatorKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PageIndicatorKind", value)
}

// NewPageIndicatorKindFromValue returns a pointer to a valid PageIndicatorKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPageIndicatorKindFromValue(v string) (*PageIndicatorKind, error) {
	ev := PageIndicatorKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PageIndicatorKind: valid values are %v", v, AllowedPageIndicatorKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PageIndicatorKind) IsValid() bool {
	for _, existing := range AllowedPageIndicatorKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PageIndicatorKind value
func (v PageIndicatorKind) Ptr() *PageIndicatorKind {
	return &v
}

type NullablePageIndicatorKind struct {
	value *PageIndicatorKind
	isSet bool
}

func (v NullablePageIndicatorKind) Get() *PageIndicatorKind {
	return v.value
}

func (v *NullablePageIndicatorKind) Set(val *PageIndicatorKind) {
	v.value = val
	v.isSet = true
}

func (v NullablePageIndicatorKind) IsSet() bool {
	return v.isSet
}

func (v *NullablePageIndicatorKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageIndicatorKind(val *PageIndicatorKind) *NullablePageIndicatorKind {
	return &NullablePageIndicatorKind{value: val, isSet: true}
}

func (v NullablePageIndicatorKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageIndicatorKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

