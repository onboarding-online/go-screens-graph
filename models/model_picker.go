/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Picker Picker element
type Picker struct {
	Box Box `json:"box"`
	DataType FieldType `json:"dataType"`
	CurrentValue string `json:"currentValue"`
	// Localized string
	DefaultValue map[string]string `json:"defaultValue"`
	Separator string `json:"separator"`
	// Picker wheels list
	Wheels []PickerWheel `json:"wheels"`
	Styles PickerBlock `json:"styles"`
	LabelStyles LabelBlock `json:"labelStyles"`
}

// NewPicker instantiates a new Picker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPicker(box Box, dataType FieldType, currentValue string, defaultValue map[string]string, separator string, wheels []PickerWheel, styles PickerBlock, labelStyles LabelBlock) *Picker {
	this := Picker{}
	this.Box = box
	this.DataType = dataType
	this.CurrentValue = currentValue
	this.DefaultValue = defaultValue
	this.Separator = separator
	this.Wheels = wheels
	this.Styles = styles
	this.LabelStyles = labelStyles
	return &this
}

// NewPickerWithDefaults instantiates a new Picker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickerWithDefaults() *Picker {
	this := Picker{}
	return &this
}

// GetBox returns the Box field value
func (o *Picker) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *Picker) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *Picker) SetBox(v Box) {
	o.Box = v
}

// GetDataType returns the DataType field value
func (o *Picker) GetDataType() FieldType {
	if o == nil {
		var ret FieldType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *Picker) GetDataTypeOk() (*FieldType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *Picker) SetDataType(v FieldType) {
	o.DataType = v
}

// GetCurrentValue returns the CurrentValue field value
func (o *Picker) GetCurrentValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value
// and a boolean to check if the value has been set.
func (o *Picker) GetCurrentValueOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentValue, true
}

// SetCurrentValue sets field value
func (o *Picker) SetCurrentValue(v string) {
	o.CurrentValue = v
}

// GetDefaultValue returns the DefaultValue field value
func (o *Picker) GetDefaultValue() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
func (o *Picker) GetDefaultValueOk() (*map[string]string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DefaultValue, true
}

// SetDefaultValue sets field value
func (o *Picker) SetDefaultValue(v map[string]string) {
	o.DefaultValue = v
}

// GetSeparator returns the Separator field value
func (o *Picker) GetSeparator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value
// and a boolean to check if the value has been set.
func (o *Picker) GetSeparatorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Separator, true
}

// SetSeparator sets field value
func (o *Picker) SetSeparator(v string) {
	o.Separator = v
}

// GetWheels returns the Wheels field value
func (o *Picker) GetWheels() []PickerWheel {
	if o == nil {
		var ret []PickerWheel
		return ret
	}

	return o.Wheels
}

// GetWheelsOk returns a tuple with the Wheels field value
// and a boolean to check if the value has been set.
func (o *Picker) GetWheelsOk() ([]PickerWheel, bool) {
	if o == nil {
    return nil, false
	}
	return o.Wheels, true
}

// SetWheels sets field value
func (o *Picker) SetWheels(v []PickerWheel) {
	o.Wheels = v
}

// GetStyles returns the Styles field value
func (o *Picker) GetStyles() PickerBlock {
	if o == nil {
		var ret PickerBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *Picker) GetStylesOk() (*PickerBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *Picker) SetStyles(v PickerBlock) {
	o.Styles = v
}

// GetLabelStyles returns the LabelStyles field value
func (o *Picker) GetLabelStyles() LabelBlock {
	if o == nil {
		var ret LabelBlock
		return ret
	}

	return o.LabelStyles
}

// GetLabelStylesOk returns a tuple with the LabelStyles field value
// and a boolean to check if the value has been set.
func (o *Picker) GetLabelStylesOk() (*LabelBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LabelStyles, true
}

// SetLabelStyles sets field value
func (o *Picker) SetLabelStyles(v LabelBlock) {
	o.LabelStyles = v
}

func (o Picker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["box"] = o.Box
	}
	if true {
		toSerialize["dataType"] = o.DataType
	}
	if true {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if true {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if true {
		toSerialize["separator"] = o.Separator
	}
	if true {
		toSerialize["wheels"] = o.Wheels
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["labelStyles"] = o.LabelStyles
	}
	return json.Marshal(toSerialize)
}

type NullablePicker struct {
	value *Picker
	isSet bool
}

func (v NullablePicker) Get() *Picker {
	return v.value
}

func (v *NullablePicker) Set(val *Picker) {
	v.value = val
	v.isSet = true
}

func (v NullablePicker) IsSet() bool {
	return v.isSet
}

func (v *NullablePicker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePicker(val *Picker) *NullablePicker {
	return &NullablePicker{value: val, isSet: true}
}

func (v NullablePicker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePicker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


