/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TimerUnit Timer unit
type TimerUnit string

// List of TimerUnit
const (
	TIMERUNIT_SECONDS TimerUnit = "Seconds"
	TIMERUNIT_MILLISECONDS TimerUnit = "Milliseconds"
)

// All allowed values of TimerUnit enum
var AllowedTimerUnitEnumValues = []TimerUnit{
	"Seconds",
	"Milliseconds",
}

func (v *TimerUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimerUnit(value)
	for _, existing := range AllowedTimerUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimerUnit", value)
}

// NewTimerUnitFromValue returns a pointer to a valid TimerUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimerUnitFromValue(v string) (*TimerUnit, error) {
	ev := TimerUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimerUnit: valid values are %v", v, AllowedTimerUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimerUnit) IsValid() bool {
	for _, existing := range AllowedTimerUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimerUnit value
func (v TimerUnit) Ptr() *TimerUnit {
	return &v
}

type NullableTimerUnit struct {
	value *TimerUnit
	isSet bool
}

func (v NullableTimerUnit) Get() *TimerUnit {
	return v.value
}

func (v *NullableTimerUnit) Set(val *TimerUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableTimerUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableTimerUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimerUnit(val *TimerUnit) *NullableTimerUnit {
	return &NullableTimerUnit{value: val, isSet: true}
}

func (v NullableTimerUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimerUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

