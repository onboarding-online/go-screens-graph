/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// CheckBox Checkbox parameters
type CheckBox struct {
	Box Box `json:"box"`
	Kind CheckBoxKind `json:"kind"`
	// Flag if checkbox checked
	Checked bool `json:"checked"`
	Styles CheckBoxBlock `json:"styles"`
	SelectedBlock SelectedCheckBoxBlock `json:"selectedBlock"`
}

// NewCheckBox instantiates a new CheckBox object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckBox(box Box, kind CheckBoxKind, checked bool, styles CheckBoxBlock, selectedBlock SelectedCheckBoxBlock) *CheckBox {
	this := CheckBox{}
	this.Kind = kind
	this.Checked = checked
	this.Styles = styles
	this.SelectedBlock = selectedBlock
	return &this
}

// NewCheckBoxWithDefaults instantiates a new CheckBox object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckBoxWithDefaults() *CheckBox {
	this := CheckBox{}
	return &this
}

// GetBox returns the Box field value
func (o *CheckBox) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *CheckBox) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *CheckBox) SetBox(v Box) {
	o.Box = v
}

// GetKind returns the Kind field value
func (o *CheckBox) GetKind() CheckBoxKind {
	if o == nil {
		var ret CheckBoxKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CheckBox) GetKindOk() (*CheckBoxKind, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CheckBox) SetKind(v CheckBoxKind) {
	o.Kind = v
}

// GetChecked returns the Checked field value
func (o *CheckBox) GetChecked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Checked
}

// GetCheckedOk returns a tuple with the Checked field value
// and a boolean to check if the value has been set.
func (o *CheckBox) GetCheckedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Checked, true
}

// SetChecked sets field value
func (o *CheckBox) SetChecked(v bool) {
	o.Checked = v
}

// GetStyles returns the Styles field value
func (o *CheckBox) GetStyles() CheckBoxBlock {
	if o == nil {
		var ret CheckBoxBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *CheckBox) GetStylesOk() (*CheckBoxBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *CheckBox) SetStyles(v CheckBoxBlock) {
	o.Styles = v
}

// GetSelectedBlock returns the SelectedBlock field value
func (o *CheckBox) GetSelectedBlock() SelectedCheckBoxBlock {
	if o == nil {
		var ret SelectedCheckBoxBlock
		return ret
	}

	return o.SelectedBlock
}

// GetSelectedBlockOk returns a tuple with the SelectedBlock field value
// and a boolean to check if the value has been set.
func (o *CheckBox) GetSelectedBlockOk() (*SelectedCheckBoxBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SelectedBlock, true
}

// SetSelectedBlock sets field value
func (o *CheckBox) SetSelectedBlock(v SelectedCheckBoxBlock) {
	o.SelectedBlock = v
}

func (o CheckBox) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["box"] = o.Box
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["checked"] = o.Checked
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["selectedBlock"] = o.SelectedBlock
	}
	return json.Marshal(toSerialize)
}

type NullableCheckBox struct {
	value *CheckBox
	isSet bool
}

func (v NullableCheckBox) Get() *CheckBox {
	return v.value
}

func (v *NullableCheckBox) Set(val *CheckBox) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckBox) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckBox) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckBox(val *CheckBox) *NullableCheckBox {
	return &NullableCheckBox{value: val, isSet: true}
}

func (v NullableCheckBox) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckBox) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


