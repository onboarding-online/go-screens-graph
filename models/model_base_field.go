/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// BaseField Base field element
type BaseField struct {
	Type FieldType `json:"type"`
	Subtype *FieldSubtype `json:"subtype,omitempty"`
	ValidationRegex *string `json:"validationRegex,omitempty"`
	ErrorMessage *BaseText `json:"errorMessage,omitempty"`
	Placeholder BaseText `json:"placeholder"`
	// Field value
	Value string `json:"value"`
	Styles FieldBlock `json:"styles"`
}

// NewBaseField instantiates a new BaseField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseField(type_ FieldType, placeholder BaseText, value string, styles FieldBlock) *BaseField {
	this := BaseField{}
	this.Type = type_
	this.Placeholder = placeholder
	this.Value = value
	this.Styles = styles
	return &this
}

// NewBaseFieldWithDefaults instantiates a new BaseField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseFieldWithDefaults() *BaseField {
	this := BaseField{}
	return &this
}

// GetType returns the Type field value
func (o *BaseField) GetType() FieldType {
	if o == nil {
		var ret FieldType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseField) GetTypeOk() (*FieldType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseField) SetType(v FieldType) {
	o.Type = v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *BaseField) GetSubtype() FieldSubtype {
	if o == nil || isNil(o.Subtype) {
		var ret FieldSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseField) GetSubtypeOk() (*FieldSubtype, bool) {
	if o == nil || isNil(o.Subtype) {
    return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *BaseField) HasSubtype() bool {
	if o != nil && !isNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given FieldSubtype and assigns it to the Subtype field.
func (o *BaseField) SetSubtype(v FieldSubtype) {
	o.Subtype = &v
}

// GetValidationRegex returns the ValidationRegex field value if set, zero value otherwise.
func (o *BaseField) GetValidationRegex() string {
	if o == nil || isNil(o.ValidationRegex) {
		var ret string
		return ret
	}
	return *o.ValidationRegex
}

// GetValidationRegexOk returns a tuple with the ValidationRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseField) GetValidationRegexOk() (*string, bool) {
	if o == nil || isNil(o.ValidationRegex) {
    return nil, false
	}
	return o.ValidationRegex, true
}

// HasValidationRegex returns a boolean if a field has been set.
func (o *BaseField) HasValidationRegex() bool {
	if o != nil && !isNil(o.ValidationRegex) {
		return true
	}

	return false
}

// SetValidationRegex gets a reference to the given string and assigns it to the ValidationRegex field.
func (o *BaseField) SetValidationRegex(v string) {
	o.ValidationRegex = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *BaseField) GetErrorMessage() BaseText {
	if o == nil || isNil(o.ErrorMessage) {
		var ret BaseText
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseField) GetErrorMessageOk() (*BaseText, bool) {
	if o == nil || isNil(o.ErrorMessage) {
    return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *BaseField) HasErrorMessage() bool {
	if o != nil && !isNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given BaseText and assigns it to the ErrorMessage field.
func (o *BaseField) SetErrorMessage(v BaseText) {
	o.ErrorMessage = &v
}

// GetPlaceholder returns the Placeholder field value
func (o *BaseField) GetPlaceholder() BaseText {
	if o == nil {
		var ret BaseText
		return ret
	}

	return o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value
// and a boolean to check if the value has been set.
func (o *BaseField) GetPlaceholderOk() (*BaseText, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Placeholder, true
}

// SetPlaceholder sets field value
func (o *BaseField) SetPlaceholder(v BaseText) {
	o.Placeholder = v
}

// GetValue returns the Value field value
func (o *BaseField) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *BaseField) GetValueOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *BaseField) SetValue(v string) {
	o.Value = v
}

// GetStyles returns the Styles field value
func (o *BaseField) GetStyles() FieldBlock {
	if o == nil {
		var ret FieldBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *BaseField) GetStylesOk() (*FieldBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *BaseField) SetStyles(v FieldBlock) {
	o.Styles = v
}

func (o BaseField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !isNil(o.ValidationRegex) {
		toSerialize["validationRegex"] = o.ValidationRegex
	}
	if !isNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if true {
		toSerialize["placeholder"] = o.Placeholder
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	return json.Marshal(toSerialize)
}

type NullableBaseField struct {
	value *BaseField
	isSet bool
}

func (v NullableBaseField) Get() *BaseField {
	return v.value
}

func (v *NullableBaseField) Set(val *BaseField) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseField) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseField(val *BaseField) *NullableBaseField {
	return &NullableBaseField{value: val, isSet: true}
}

func (v NullableBaseField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


