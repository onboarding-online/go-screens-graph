/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ItemTypeRegular Structure of full collection item type for regular list
type ItemTypeRegular struct {
	Image Image `json:"image"`
	Title Text `json:"title"`
	Subtitle *Text `json:"subtitle,omitempty"`
	Box Box `json:"box"`
}

// NewItemTypeRegular instantiates a new ItemTypeRegular object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemTypeRegular(image Image, title Text, box Box) *ItemTypeRegular {
	this := ItemTypeRegular{}
	this.Image = image
	this.Title = title
	this.Box = box
	return &this
}

// NewItemTypeRegularWithDefaults instantiates a new ItemTypeRegular object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemTypeRegularWithDefaults() *ItemTypeRegular {
	this := ItemTypeRegular{}
	return &this
}

// GetImage returns the Image field value
func (o *ItemTypeRegular) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ItemTypeRegular) GetImageOk() (*Image, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ItemTypeRegular) SetImage(v Image) {
	o.Image = v
}

// GetTitle returns the Title field value
func (o *ItemTypeRegular) GetTitle() Text {
	if o == nil {
		var ret Text
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ItemTypeRegular) GetTitleOk() (*Text, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ItemTypeRegular) SetTitle(v Text) {
	o.Title = v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *ItemTypeRegular) GetSubtitle() Text {
	if o == nil || isNil(o.Subtitle) {
		var ret Text
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemTypeRegular) GetSubtitleOk() (*Text, bool) {
	if o == nil || isNil(o.Subtitle) {
    return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *ItemTypeRegular) HasSubtitle() bool {
	if o != nil && !isNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given Text and assigns it to the Subtitle field.
func (o *ItemTypeRegular) SetSubtitle(v Text) {
	o.Subtitle = &v
}

// GetBox returns the Box field value
func (o *ItemTypeRegular) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *ItemTypeRegular) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *ItemTypeRegular) SetBox(v Box) {
	o.Box = v
}

func (o ItemTypeRegular) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if true {
		toSerialize["box"] = o.Box
	}
	return json.Marshal(toSerialize)
}

type NullableItemTypeRegular struct {
	value *ItemTypeRegular
	isSet bool
}

func (v NullableItemTypeRegular) Get() *ItemTypeRegular {
	return v.value
}

func (v *NullableItemTypeRegular) Set(val *ItemTypeRegular) {
	v.value = val
	v.isSet = true
}

func (v NullableItemTypeRegular) IsSet() bool {
	return v.isSet
}

func (v *NullableItemTypeRegular) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemTypeRegular(val *ItemTypeRegular) *NullableItemTypeRegular {
	return &NullableItemTypeRegular{value: val, isSet: true}
}

func (v NullableItemTypeRegular) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemTypeRegular) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


