/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// TwoColumnMultipleSelectionListItemType Combination of fields for two column multiple selection list item
type TwoColumnMultipleSelectionListItemType string

// List of TwoColumnMultipleSelectionListItemType
const (
	TWOCOLUMNMULTIPLESELECTIONLISTITEMTYPE_TITTLE TwoColumnMultipleSelectionListItemType = "Tittle"
	TWOCOLUMNMULTIPLESELECTIONLISTITEMTYPE_TITLE_SUBTITLE TwoColumnMultipleSelectionListItemType = "TitleSubtitle"
	TWOCOLUMNMULTIPLESELECTIONLISTITEMTYPE_SMALL_IMAGE_TITLE TwoColumnMultipleSelectionListItemType = "SmallImageTitle"
	TWOCOLUMNMULTIPLESELECTIONLISTITEMTYPE_MEDIUM_IMAGE_TITLE TwoColumnMultipleSelectionListItemType = "MediumImageTitle"
	TWOCOLUMNMULTIPLESELECTIONLISTITEMTYPE_FULL_IMAGE TwoColumnMultipleSelectionListItemType = "FullImage"
	TWOCOLUMNMULTIPLESELECTIONLISTITEMTYPE_BIG_IMAGE_TITLE TwoColumnMultipleSelectionListItemType = "BigImageTitle"
)

// All allowed values of TwoColumnMultipleSelectionListItemType enum
var AllowedTwoColumnMultipleSelectionListItemTypeEnumValues = []TwoColumnMultipleSelectionListItemType{
	"Tittle",
	"TitleSubtitle",
	"SmallImageTitle",
	"MediumImageTitle",
	"FullImage",
	"BigImageTitle",
}

func (v *TwoColumnMultipleSelectionListItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TwoColumnMultipleSelectionListItemType(value)
	for _, existing := range AllowedTwoColumnMultipleSelectionListItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TwoColumnMultipleSelectionListItemType", value)
}

// NewTwoColumnMultipleSelectionListItemTypeFromValue returns a pointer to a valid TwoColumnMultipleSelectionListItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTwoColumnMultipleSelectionListItemTypeFromValue(v string) (*TwoColumnMultipleSelectionListItemType, error) {
	ev := TwoColumnMultipleSelectionListItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TwoColumnMultipleSelectionListItemType: valid values are %v", v, AllowedTwoColumnMultipleSelectionListItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TwoColumnMultipleSelectionListItemType) IsValid() bool {
	for _, existing := range AllowedTwoColumnMultipleSelectionListItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TwoColumnMultipleSelectionListItemType value
func (v TwoColumnMultipleSelectionListItemType) Ptr() *TwoColumnMultipleSelectionListItemType {
	return &v
}

type NullableTwoColumnMultipleSelectionListItemType struct {
	value *TwoColumnMultipleSelectionListItemType
	isSet bool
}

func (v NullableTwoColumnMultipleSelectionListItemType) Get() *TwoColumnMultipleSelectionListItemType {
	return v.value
}

func (v *NullableTwoColumnMultipleSelectionListItemType) Set(val *TwoColumnMultipleSelectionListItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableTwoColumnMultipleSelectionListItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableTwoColumnMultipleSelectionListItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwoColumnMultipleSelectionListItemType(val *TwoColumnMultipleSelectionListItemType) *NullableTwoColumnMultipleSelectionListItemType {
	return &NullableTwoColumnMultipleSelectionListItemType{value: val, isSet: true}
}

func (v NullableTwoColumnMultipleSelectionListItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwoColumnMultipleSelectionListItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

