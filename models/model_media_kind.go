/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MediaKind Media kind
type MediaKind string

// List of MediaKind
const (
	MEDIAKIND_IMAGE MediaKind = "Image"
	MEDIAKIND_VIDEO MediaKind = "Video"
)

// All allowed values of MediaKind enum
var AllowedMediaKindEnumValues = []MediaKind{
	"Image",
	"Video",
}

func (v *MediaKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaKind(value)
	for _, existing := range AllowedMediaKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaKind", value)
}

// NewMediaKindFromValue returns a pointer to a valid MediaKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaKindFromValue(v string) (*MediaKind, error) {
	ev := MediaKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaKind: valid values are %v", v, AllowedMediaKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaKind) IsValid() bool {
	for _, existing := range AllowedMediaKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaKind value
func (v MediaKind) Ptr() *MediaKind {
	return &v
}

type NullableMediaKind struct {
	value *MediaKind
	isSet bool
}

func (v NullableMediaKind) Get() *MediaKind {
	return v.value
}

func (v *NullableMediaKind) Set(val *MediaKind) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaKind) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaKind(val *MediaKind) *NullableMediaKind {
	return &NullableMediaKind{value: val, isSet: true}
}

func (v NullableMediaKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

