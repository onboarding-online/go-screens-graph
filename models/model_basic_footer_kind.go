/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// BasicFooterKind Basic footer kind
type BasicFooterKind string

// List of BasicFooterKind
const (
	BASICFOOTERKIND_VERTICAL BasicFooterKind = "Vertical"
	BASICFOOTERKIND_HORIZONTAL BasicFooterKind = "Horizontal"
	BASICFOOTERKIND_BASIC_FOOTER_KIND1 BasicFooterKind = "BasicFooterKind1"
	BASICFOOTERKIND_BASIC_FOOTER_KIND2 BasicFooterKind = "BasicFooterKind2"
	BASICFOOTERKIND_BASIC_FOOTER_KIND3 BasicFooterKind = "BasicFooterKind3"
	BASICFOOTERKIND_BASIC_FOOTER_KIND4 BasicFooterKind = "BasicFooterKind4"
	BASICFOOTERKIND_BASIC_FOOTER_KIND5 BasicFooterKind = "BasicFooterKind5"
)

// All allowed values of BasicFooterKind enum
var AllowedBasicFooterKindEnumValues = []BasicFooterKind{
	"Vertical",
	"Horizontal",
	"BasicFooterKind1",
	"BasicFooterKind2",
	"BasicFooterKind3",
	"BasicFooterKind4",
	"BasicFooterKind5",
}

func (v *BasicFooterKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BasicFooterKind(value)
	for _, existing := range AllowedBasicFooterKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BasicFooterKind", value)
}

// NewBasicFooterKindFromValue returns a pointer to a valid BasicFooterKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBasicFooterKindFromValue(v string) (*BasicFooterKind, error) {
	ev := BasicFooterKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BasicFooterKind: valid values are %v", v, AllowedBasicFooterKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BasicFooterKind) IsValid() bool {
	for _, existing := range AllowedBasicFooterKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BasicFooterKind value
func (v BasicFooterKind) Ptr() *BasicFooterKind {
	return &v
}

type NullableBasicFooterKind struct {
	value *BasicFooterKind
	isSet bool
}

func (v NullableBasicFooterKind) Get() *BasicFooterKind {
	return v.value
}

func (v *NullableBasicFooterKind) Set(val *BasicFooterKind) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicFooterKind) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicFooterKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicFooterKind(val *BasicFooterKind) *NullableBasicFooterKind {
	return &NullableBasicFooterKind{value: val, isSet: true}
}

func (v NullableBasicFooterKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicFooterKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

