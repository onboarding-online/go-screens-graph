/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SliderKind Slider kind
type SliderKind string

// List of SliderKind
const (
	SLIDERKIND_IMAGE SliderKind = "Image"
	SLIDERKIND_IMAGE_TITLE SliderKind = "ImageTitle"
	SLIDERKIND_IMAGE_TITLE_SUBTITLE1 SliderKind = "ImageTitleSubtitle1"
	SLIDERKIND_IMAGE_TITLE_SUBTITLE1_SUBTITLE2 SliderKind = "ImageTitleSubtitle1Subtitle2"
)

// All allowed values of SliderKind enum
var AllowedSliderKindEnumValues = []SliderKind{
	"Image",
	"ImageTitle",
	"ImageTitleSubtitle1",
	"ImageTitleSubtitle1Subtitle2",
}

func (v *SliderKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SliderKind(value)
	for _, existing := range AllowedSliderKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SliderKind", value)
}

// NewSliderKindFromValue returns a pointer to a valid SliderKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSliderKindFromValue(v string) (*SliderKind, error) {
	ev := SliderKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SliderKind: valid values are %v", v, AllowedSliderKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SliderKind) IsValid() bool {
	for _, existing := range AllowedSliderKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SliderKind value
func (v SliderKind) Ptr() *SliderKind {
	return &v
}

type NullableSliderKind struct {
	value *SliderKind
	isSet bool
}

func (v NullableSliderKind) Get() *SliderKind {
	return v.value
}

func (v *NullableSliderKind) Set(val *SliderKind) {
	v.value = val
	v.isSet = true
}

func (v NullableSliderKind) IsSet() bool {
	return v.isSet
}

func (v *NullableSliderKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliderKind(val *SliderKind) *NullableSliderKind {
	return &NullableSliderKind{value: val, isSet: true}
}

func (v NullableSliderKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliderKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

