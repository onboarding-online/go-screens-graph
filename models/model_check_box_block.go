/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// CheckBoxBlock Styles for checkbox
type CheckBoxBlock struct {
	// Color of checkbox
	Color *string `json:"color,omitempty"`
	IsBackgroundFilled *bool `json:"isBackgroundFilled,omitempty"`
	Width *float32 `json:"width,omitempty"`
	Height *float32 `json:"height,omitempty"`
}

// NewCheckBoxBlock instantiates a new CheckBoxBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckBoxBlock() *CheckBoxBlock {
	this := CheckBoxBlock{}
	return &this
}

// NewCheckBoxBlockWithDefaults instantiates a new CheckBoxBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckBoxBlockWithDefaults() *CheckBoxBlock {
	this := CheckBoxBlock{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CheckBoxBlock) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBoxBlock) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CheckBoxBlock) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CheckBoxBlock) SetColor(v string) {
	o.Color = &v
}

// GetIsBackgroundFilled returns the IsBackgroundFilled field value if set, zero value otherwise.
func (o *CheckBoxBlock) GetIsBackgroundFilled() bool {
	if o == nil || isNil(o.IsBackgroundFilled) {
		var ret bool
		return ret
	}
	return *o.IsBackgroundFilled
}

// GetIsBackgroundFilledOk returns a tuple with the IsBackgroundFilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBoxBlock) GetIsBackgroundFilledOk() (*bool, bool) {
	if o == nil || isNil(o.IsBackgroundFilled) {
    return nil, false
	}
	return o.IsBackgroundFilled, true
}

// HasIsBackgroundFilled returns a boolean if a field has been set.
func (o *CheckBoxBlock) HasIsBackgroundFilled() bool {
	if o != nil && !isNil(o.IsBackgroundFilled) {
		return true
	}

	return false
}

// SetIsBackgroundFilled gets a reference to the given bool and assigns it to the IsBackgroundFilled field.
func (o *CheckBoxBlock) SetIsBackgroundFilled(v bool) {
	o.IsBackgroundFilled = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *CheckBoxBlock) GetWidth() float32 {
	if o == nil || isNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBoxBlock) GetWidthOk() (*float32, bool) {
	if o == nil || isNil(o.Width) {
    return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *CheckBoxBlock) HasWidth() bool {
	if o != nil && !isNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *CheckBoxBlock) SetWidth(v float32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *CheckBoxBlock) GetHeight() float32 {
	if o == nil || isNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBoxBlock) GetHeightOk() (*float32, bool) {
	if o == nil || isNil(o.Height) {
    return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *CheckBoxBlock) HasHeight() bool {
	if o != nil && !isNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *CheckBoxBlock) SetHeight(v float32) {
	o.Height = &v
}

func (o CheckBoxBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.IsBackgroundFilled) {
		toSerialize["isBackgroundFilled"] = o.IsBackgroundFilled
	}
	if !isNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !isNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}

type NullableCheckBoxBlock struct {
	value *CheckBoxBlock
	isSet bool
}

func (v NullableCheckBoxBlock) Get() *CheckBoxBlock {
	return v.value
}

func (v *NullableCheckBoxBlock) Set(val *CheckBoxBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckBoxBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckBoxBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckBoxBlock(val *CheckBoxBlock) *NullableCheckBoxBlock {
	return &NullableCheckBoxBlock{value: val, isSet: true}
}

func (v NullableCheckBoxBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckBoxBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


