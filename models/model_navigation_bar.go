/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// NavigationBar Basic navigation bar
type NavigationBar struct {
	Back *Button `json:"back,omitempty"`
	Skip *Button `json:"skip,omitempty"`
	PageIndicator *PageIndicator `json:"pageIndicator,omitempty"`
	PageIndicatorKind *PageIndicatorKind `json:"pageIndicatorKind,omitempty"`
	DashesPageIndicator *DashesPageIndicator `json:"dashesPageIndicator,omitempty"`
}

// NewNavigationBar instantiates a new NavigationBar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNavigationBar() *NavigationBar {
	this := NavigationBar{}
	return &this
}

// NewNavigationBarWithDefaults instantiates a new NavigationBar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNavigationBarWithDefaults() *NavigationBar {
	this := NavigationBar{}
	return &this
}

// GetBack returns the Back field value if set, zero value otherwise.
func (o *NavigationBar) GetBack() Button {
	if o == nil || isNil(o.Back) {
		var ret Button
		return ret
	}
	return *o.Back
}

// GetBackOk returns a tuple with the Back field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationBar) GetBackOk() (*Button, bool) {
	if o == nil || isNil(o.Back) {
    return nil, false
	}
	return o.Back, true
}

// HasBack returns a boolean if a field has been set.
func (o *NavigationBar) HasBack() bool {
	if o != nil && !isNil(o.Back) {
		return true
	}

	return false
}

// SetBack gets a reference to the given Button and assigns it to the Back field.
func (o *NavigationBar) SetBack(v Button) {
	o.Back = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *NavigationBar) GetSkip() Button {
	if o == nil || isNil(o.Skip) {
		var ret Button
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationBar) GetSkipOk() (*Button, bool) {
	if o == nil || isNil(o.Skip) {
    return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *NavigationBar) HasSkip() bool {
	if o != nil && !isNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given Button and assigns it to the Skip field.
func (o *NavigationBar) SetSkip(v Button) {
	o.Skip = &v
}

// GetPageIndicator returns the PageIndicator field value if set, zero value otherwise.
func (o *NavigationBar) GetPageIndicator() PageIndicator {
	if o == nil || isNil(o.PageIndicator) {
		var ret PageIndicator
		return ret
	}
	return *o.PageIndicator
}

// GetPageIndicatorOk returns a tuple with the PageIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationBar) GetPageIndicatorOk() (*PageIndicator, bool) {
	if o == nil || isNil(o.PageIndicator) {
    return nil, false
	}
	return o.PageIndicator, true
}

// HasPageIndicator returns a boolean if a field has been set.
func (o *NavigationBar) HasPageIndicator() bool {
	if o != nil && !isNil(o.PageIndicator) {
		return true
	}

	return false
}

// SetPageIndicator gets a reference to the given PageIndicator and assigns it to the PageIndicator field.
func (o *NavigationBar) SetPageIndicator(v PageIndicator) {
	o.PageIndicator = &v
}

// GetPageIndicatorKind returns the PageIndicatorKind field value if set, zero value otherwise.
func (o *NavigationBar) GetPageIndicatorKind() PageIndicatorKind {
	if o == nil || isNil(o.PageIndicatorKind) {
		var ret PageIndicatorKind
		return ret
	}
	return *o.PageIndicatorKind
}

// GetPageIndicatorKindOk returns a tuple with the PageIndicatorKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationBar) GetPageIndicatorKindOk() (*PageIndicatorKind, bool) {
	if o == nil || isNil(o.PageIndicatorKind) {
    return nil, false
	}
	return o.PageIndicatorKind, true
}

// HasPageIndicatorKind returns a boolean if a field has been set.
func (o *NavigationBar) HasPageIndicatorKind() bool {
	if o != nil && !isNil(o.PageIndicatorKind) {
		return true
	}

	return false
}

// SetPageIndicatorKind gets a reference to the given PageIndicatorKind and assigns it to the PageIndicatorKind field.
func (o *NavigationBar) SetPageIndicatorKind(v PageIndicatorKind) {
	o.PageIndicatorKind = &v
}

// GetDashesPageIndicator returns the DashesPageIndicator field value if set, zero value otherwise.
func (o *NavigationBar) GetDashesPageIndicator() DashesPageIndicator {
	if o == nil || isNil(o.DashesPageIndicator) {
		var ret DashesPageIndicator
		return ret
	}
	return *o.DashesPageIndicator
}

// GetDashesPageIndicatorOk returns a tuple with the DashesPageIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationBar) GetDashesPageIndicatorOk() (*DashesPageIndicator, bool) {
	if o == nil || isNil(o.DashesPageIndicator) {
    return nil, false
	}
	return o.DashesPageIndicator, true
}

// HasDashesPageIndicator returns a boolean if a field has been set.
func (o *NavigationBar) HasDashesPageIndicator() bool {
	if o != nil && !isNil(o.DashesPageIndicator) {
		return true
	}

	return false
}

// SetDashesPageIndicator gets a reference to the given DashesPageIndicator and assigns it to the DashesPageIndicator field.
func (o *NavigationBar) SetDashesPageIndicator(v DashesPageIndicator) {
	o.DashesPageIndicator = &v
}

func (o NavigationBar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Back) {
		toSerialize["back"] = o.Back
	}
	if !isNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !isNil(o.PageIndicator) {
		toSerialize["pageIndicator"] = o.PageIndicator
	}
	if !isNil(o.PageIndicatorKind) {
		toSerialize["pageIndicatorKind"] = o.PageIndicatorKind
	}
	if !isNil(o.DashesPageIndicator) {
		toSerialize["dashesPageIndicator"] = o.DashesPageIndicator
	}
	return json.Marshal(toSerialize)
}

type NullableNavigationBar struct {
	value *NavigationBar
	isSet bool
}

func (v NullableNavigationBar) Get() *NavigationBar {
	return v.value
}

func (v *NullableNavigationBar) Set(val *NavigationBar) {
	v.value = val
	v.isSet = true
}

func (v NullableNavigationBar) IsSet() bool {
	return v.isSet
}

func (v *NullableNavigationBar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNavigationBar(val *NavigationBar) *NullableNavigationBar {
	return &NullableNavigationBar{value: val, isSet: true}
}

func (v NullableNavigationBar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNavigationBar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


