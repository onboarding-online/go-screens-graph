/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ScreenElement Enum of all main screen elements
type ScreenElement string

// List of ScreenElement
const (
	SCREENELEMENT_NAVIGATION_BAR ScreenElement = "NavigationBar"
	SCREENELEMENT_IMAGE ScreenElement = "Image"
	SCREENELEMENT_VIDEO ScreenElement = "Video"
	SCREENELEMENT_TITLE ScreenElement = "Title"
	SCREENELEMENT_SUBTITLE ScreenElement = "Subtitle"
	SCREENELEMENT_SUBTITLE1 ScreenElement = "Subtitle1"
	SCREENELEMENT_SUBTITLE2 ScreenElement = "Subtitle2"
	SCREENELEMENT_PICKER ScreenElement = "Picker"
	SCREENELEMENT_CALENDAR ScreenElement = "Calendar"
	SCREENELEMENT_FIELD ScreenElement = "Field"
	SCREENELEMENT_SINGLE_SELECTION_LIST ScreenElement = "SingleSelectionList"
	SCREENELEMENT_MULTIPLE_SELECTION_LIST ScreenElement = "MultipleSelectionList"
	SCREENELEMENT_TWO_COLUMN_SINGLE_SELECTION_LIST ScreenElement = "TwoColumnSingleSelectionList"
	SCREENELEMENT_TWO_COLUMN_MULTIPLE_SELECTION_LIST ScreenElement = "TwoColumnMultipleSelectionList"
	SCREENELEMENT_REGULAR_LIST ScreenElement = "RegularList"
	SCREENELEMENT_PROGRESS_BAR ScreenElement = "ProgressBar"
	SCREENELEMENT_SLIDER ScreenElement = "Slider"
	SCREENELEMENT_FOOTER ScreenElement = "Footer"
	SCREENELEMENT_TOOLTIP ScreenElement = "Tooltip"
)

// All allowed values of ScreenElement enum
var AllowedScreenElementEnumValues = []ScreenElement{
	"NavigationBar",
	"Image",
	"Video",
	"Title",
	"Subtitle",
	"Subtitle1",
	"Subtitle2",
	"Picker",
	"Calendar",
	"Field",
	"SingleSelectionList",
	"MultipleSelectionList",
	"TwoColumnSingleSelectionList",
	"TwoColumnMultipleSelectionList",
	"RegularList",
	"ProgressBar",
	"Slider",
	"Footer",
	"Tooltip",
}

func (v *ScreenElement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScreenElement(value)
	for _, existing := range AllowedScreenElementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScreenElement", value)
}

// NewScreenElementFromValue returns a pointer to a valid ScreenElement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScreenElementFromValue(v string) (*ScreenElement, error) {
	ev := ScreenElement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScreenElement: valid values are %v", v, AllowedScreenElementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScreenElement) IsValid() bool {
	for _, existing := range AllowedScreenElementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScreenElement value
func (v ScreenElement) Ptr() *ScreenElement {
	return &v
}

type NullableScreenElement struct {
	value *ScreenElement
	isSet bool
}

func (v NullableScreenElement) Get() *ScreenElement {
	return v.value
}

func (v *NullableScreenElement) Set(val *ScreenElement) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenElement) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenElement(val *ScreenElement) *NullableScreenElement {
	return &NullableScreenElement{value: val, isSet: true}
}

func (v NullableScreenElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

