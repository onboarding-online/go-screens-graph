/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Tooltip Tooltip parameters
type Tooltip struct {
	Image Image `json:"image"`
	Title Text `json:"title"`
	Position PositionOnDevice `json:"position"`
	Styles TooltipBlock `json:"styles"`
	Box Box `json:"box"`
}

// NewTooltip instantiates a new Tooltip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTooltip(image Image, title Text, position PositionOnDevice, styles TooltipBlock, box Box) *Tooltip {
	this := Tooltip{}
	this.Image = image
	this.Title = title
	this.Position = position
	this.Styles = styles
	this.Box = box
	return &this
}

// NewTooltipWithDefaults instantiates a new Tooltip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTooltipWithDefaults() *Tooltip {
	this := Tooltip{}
	return &this
}

// GetImage returns the Image field value
func (o *Tooltip) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Tooltip) GetImageOk() (*Image, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *Tooltip) SetImage(v Image) {
	o.Image = v
}

// GetTitle returns the Title field value
func (o *Tooltip) GetTitle() Text {
	if o == nil {
		var ret Text
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Tooltip) GetTitleOk() (*Text, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Tooltip) SetTitle(v Text) {
	o.Title = v
}

// GetPosition returns the Position field value
func (o *Tooltip) GetPosition() PositionOnDevice {
	if o == nil {
		var ret PositionOnDevice
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *Tooltip) GetPositionOk() (*PositionOnDevice, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *Tooltip) SetPosition(v PositionOnDevice) {
	o.Position = v
}

// GetStyles returns the Styles field value
func (o *Tooltip) GetStyles() TooltipBlock {
	if o == nil {
		var ret TooltipBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *Tooltip) GetStylesOk() (*TooltipBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *Tooltip) SetStyles(v TooltipBlock) {
	o.Styles = v
}

// GetBox returns the Box field value
func (o *Tooltip) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *Tooltip) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *Tooltip) SetBox(v Box) {
	o.Box = v
}

func (o Tooltip) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["position"] = o.Position
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["box"] = o.Box
	}
	return json.Marshal(toSerialize)
}

type NullableTooltip struct {
	value *Tooltip
	isSet bool
}

func (v NullableTooltip) Get() *Tooltip {
	return v.value
}

func (v *NullableTooltip) Set(val *Tooltip) {
	v.value = val
	v.isSet = true
}

func (v NullableTooltip) IsSet() bool {
	return v.isSet
}

func (v *NullableTooltip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTooltip(val *Tooltip) *NullableTooltip {
	return &NullableTooltip{value: val, isSet: true}
}

func (v NullableTooltip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTooltip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


