/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ScreenPermissionType Screen permission type
type ScreenPermissionType string

// List of ScreenPermissionType
const (
	SCREENPERMISSIONTYPE_NOTIFICATIONS ScreenPermissionType = "notifications"
	SCREENPERMISSIONTYPE_ADS ScreenPermissionType = "ads"
)

// All allowed values of ScreenPermissionType enum
var AllowedScreenPermissionTypeEnumValues = []ScreenPermissionType{
	"notifications",
	"ads",
}

func (v *ScreenPermissionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScreenPermissionType(value)
	for _, existing := range AllowedScreenPermissionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScreenPermissionType", value)
}

// NewScreenPermissionTypeFromValue returns a pointer to a valid ScreenPermissionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScreenPermissionTypeFromValue(v string) (*ScreenPermissionType, error) {
	ev := ScreenPermissionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScreenPermissionType: valid values are %v", v, AllowedScreenPermissionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScreenPermissionType) IsValid() bool {
	for _, existing := range AllowedScreenPermissionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScreenPermissionType value
func (v ScreenPermissionType) Ptr() *ScreenPermissionType {
	return &v
}

type NullableScreenPermissionType struct {
	value *ScreenPermissionType
	isSet bool
}

func (v NullableScreenPermissionType) Get() *ScreenPermissionType {
	return v.value
}

func (v *NullableScreenPermissionType) Set(val *ScreenPermissionType) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenPermissionType) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenPermissionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenPermissionType(val *ScreenPermissionType) *NullableScreenPermissionType {
	return &NullableScreenPermissionType{value: val, isSet: true}
}

func (v NullableScreenPermissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenPermissionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

