/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FooterElement Enum of all footer elements
type FooterElement string

// List of FooterElement
const (
	FOOTERELEMENT_BUTTON1 FooterElement = "Button1"
	FOOTERELEMENT_BUTTON2 FooterElement = "Button2"
)

// All allowed values of FooterElement enum
var AllowedFooterElementEnumValues = []FooterElement{
	"Button1",
	"Button2",
}

func (v *FooterElement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FooterElement(value)
	for _, existing := range AllowedFooterElementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FooterElement", value)
}

// NewFooterElementFromValue returns a pointer to a valid FooterElement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFooterElementFromValue(v string) (*FooterElement, error) {
	ev := FooterElement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FooterElement: valid values are %v", v, AllowedFooterElementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FooterElement) IsValid() bool {
	for _, existing := range AllowedFooterElementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FooterElement value
func (v FooterElement) Ptr() *FooterElement {
	return &v
}

type NullableFooterElement struct {
	value *FooterElement
	isSet bool
}

func (v NullableFooterElement) Get() *FooterElement {
	return v.value
}

func (v *NullableFooterElement) Set(val *FooterElement) {
	v.value = val
	v.isSet = true
}

func (v NullableFooterElement) IsSet() bool {
	return v.isSet
}

func (v *NullableFooterElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFooterElement(val *FooterElement) *NullableFooterElement {
	return &NullableFooterElement{value: val, isSet: true}
}

func (v NullableFooterElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFooterElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

