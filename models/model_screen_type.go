/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ScreenType The screen type
type ScreenType string

// List of ScreenType
const (
	SCREENTYPE_CUSTOM_SCREEN ScreenType = "CustomScreen"
	SCREENTYPE_SCREEN_IMAGE_TITLE_SUBTITLES ScreenType = "ScreenImageTitleSubtitles"
	SCREENTYPE_SCREEN_SLIDER ScreenType = "ScreenSlider"
	SCREENTYPE_SCREEN_TABLE_MULTIPLE_SELECTION ScreenType = "ScreenTableMultipleSelection"
	SCREENTYPE_SCREEN_TABLE_SINGLE_SELECTION ScreenType = "ScreenTableSingleSelection"
	SCREENTYPE_SCREEN_TITLE_SUBTITLE_FIELD ScreenType = "ScreenTitleSubtitleField"
	SCREENTYPE_SCREEN_PROGRESS_BAR_TITLE ScreenType = "ScreenProgressBarTitle"
	SCREENTYPE_SCREEN_TWO_COLUMN_MULTIPLE_SELECTION ScreenType = "ScreenTwoColumnMultipleSelection"
	SCREENTYPE_SCREEN_TWO_COLUMN_SINGLE_SELECTION ScreenType = "ScreenTwoColumnSingleSelection"
	SCREENTYPE_SCREEN_IMAGE_TITLE_SUBTITLE_LIST ScreenType = "ScreenImageTitleSubtitleList"
	SCREENTYPE_SCREEN_TITLE_SUBTITLE_CALENDAR ScreenType = "ScreenTitleSubtitleCalendar"
	SCREENTYPE_SCREEN_TITLE_SUBTITLE_PICKER ScreenType = "ScreenTitleSubtitlePicker"
	SCREENTYPE_SCREEN_IMAGE_TITLE_SUBTITLE_PICKER ScreenType = "ScreenImageTitleSubtitlePicker"
	SCREENTYPE_SCREEN_IMAGE_TITLE_SUBTITLE_MULTIPLE_SELECTION_LIST ScreenType = "ScreenImageTitleSubtitleMultipleSelectionList"
	SCREENTYPE_SCREEN_TOOLTIP_PERMISSIONS ScreenType = "ScreenTooltipPermissions"
	SCREENTYPE_SCREEN_BASIC_PAYWALL ScreenType = "ScreenBasicPaywall"
)

// All allowed values of ScreenType enum
var AllowedScreenTypeEnumValues = []ScreenType{
	"CustomScreen",
	"ScreenImageTitleSubtitles",
	"ScreenSlider",
	"ScreenTableMultipleSelection",
	"ScreenTableSingleSelection",
	"ScreenTitleSubtitleField",
	"ScreenProgressBarTitle",
	"ScreenTwoColumnMultipleSelection",
	"ScreenTwoColumnSingleSelection",
	"ScreenImageTitleSubtitleList",
	"ScreenTitleSubtitleCalendar",
	"ScreenTitleSubtitlePicker",
	"ScreenImageTitleSubtitlePicker",
	"ScreenImageTitleSubtitleMultipleSelectionList",
	"ScreenTooltipPermissions",
	"ScreenBasicPaywall",
}

func (v *ScreenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScreenType(value)
	for _, existing := range AllowedScreenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScreenType", value)
}

// NewScreenTypeFromValue returns a pointer to a valid ScreenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScreenTypeFromValue(v string) (*ScreenType, error) {
	ev := ScreenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScreenType: valid values are %v", v, AllowedScreenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScreenType) IsValid() bool {
	for _, existing := range AllowedScreenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScreenType value
func (v ScreenType) Ptr() *ScreenType {
	return &v
}

type NullableScreenType struct {
	value *ScreenType
	isSet bool
}

func (v NullableScreenType) Get() *ScreenType {
	return v.value
}

func (v *NullableScreenType) Set(val *ScreenType) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenType) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenType(val *ScreenType) *NullableScreenType {
	return &NullableScreenType{value: val, isSet: true}
}

func (v NullableScreenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

