/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// BaseButton Base button parameters
type BaseButton struct {
	Kind ButtonKind `json:"kind"`
	Content BaseButtonContent `json:"content"`
	Styles ButtonBlock `json:"styles"`
	Action Action `json:"action"`
}

// NewBaseButton instantiates a new BaseButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseButton(kind ButtonKind, content BaseButtonContent, styles ButtonBlock, action Action) *BaseButton {
	this := BaseButton{}
	this.Kind = kind
	this.Content = content
	this.Styles = styles
	this.Action = action
	return &this
}

// NewBaseButtonWithDefaults instantiates a new BaseButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseButtonWithDefaults() *BaseButton {
	this := BaseButton{}
	return &this
}

// GetKind returns the Kind field value
func (o *BaseButton) GetKind() ButtonKind {
	if o == nil {
		var ret ButtonKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *BaseButton) GetKindOk() (*ButtonKind, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *BaseButton) SetKind(v ButtonKind) {
	o.Kind = v
}

// GetContent returns the Content field value
func (o *BaseButton) GetContent() BaseButtonContent {
	if o == nil {
		var ret BaseButtonContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *BaseButton) GetContentOk() (*BaseButtonContent, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *BaseButton) SetContent(v BaseButtonContent) {
	o.Content = v
}

// GetStyles returns the Styles field value
func (o *BaseButton) GetStyles() ButtonBlock {
	if o == nil {
		var ret ButtonBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *BaseButton) GetStylesOk() (*ButtonBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *BaseButton) SetStyles(v ButtonBlock) {
	o.Styles = v
}

// GetAction returns the Action field value
func (o *BaseButton) GetAction() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *BaseButton) GetActionOk() (*Action, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *BaseButton) SetAction(v Action) {
	o.Action = v
}

func (o BaseButton) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["action"] = o.Action
	}
	return json.Marshal(toSerialize)
}

type NullableBaseButton struct {
	value *BaseButton
	isSet bool
}

func (v NullableBaseButton) Get() *BaseButton {
	return v.value
}

func (v *NullableBaseButton) Set(val *BaseButton) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseButton) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseButton(val *BaseButton) *NullableBaseButton {
	return &NullableBaseButton{value: val, isSet: true}
}

func (v NullableBaseButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


