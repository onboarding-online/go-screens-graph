/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ButtonMovingAnimation Button moving animation
type ButtonMovingAnimation string

// List of ButtonMovingAnimation
const (
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION1 ButtonMovingAnimation = "ButtonMovingAnimation1"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION2 ButtonMovingAnimation = "ButtonMovingAnimation2"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION3 ButtonMovingAnimation = "ButtonMovingAnimation3"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION4 ButtonMovingAnimation = "ButtonMovingAnimation4"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION5 ButtonMovingAnimation = "ButtonMovingAnimation5"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION6 ButtonMovingAnimation = "ButtonMovingAnimation6"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION7 ButtonMovingAnimation = "ButtonMovingAnimation7"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION8 ButtonMovingAnimation = "ButtonMovingAnimation8"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION9 ButtonMovingAnimation = "ButtonMovingAnimation9"
	BUTTONMOVINGANIMATION_BUTTON_MOVING_ANIMATION10 ButtonMovingAnimation = "ButtonMovingAnimation10"
)

// All allowed values of ButtonMovingAnimation enum
var AllowedButtonMovingAnimationEnumValues = []ButtonMovingAnimation{
	"ButtonMovingAnimation1",
	"ButtonMovingAnimation2",
	"ButtonMovingAnimation3",
	"ButtonMovingAnimation4",
	"ButtonMovingAnimation5",
	"ButtonMovingAnimation6",
	"ButtonMovingAnimation7",
	"ButtonMovingAnimation8",
	"ButtonMovingAnimation9",
	"ButtonMovingAnimation10",
}

func (v *ButtonMovingAnimation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ButtonMovingAnimation(value)
	for _, existing := range AllowedButtonMovingAnimationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ButtonMovingAnimation", value)
}

// NewButtonMovingAnimationFromValue returns a pointer to a valid ButtonMovingAnimation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewButtonMovingAnimationFromValue(v string) (*ButtonMovingAnimation, error) {
	ev := ButtonMovingAnimation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ButtonMovingAnimation: valid values are %v", v, AllowedButtonMovingAnimationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ButtonMovingAnimation) IsValid() bool {
	for _, existing := range AllowedButtonMovingAnimationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ButtonMovingAnimation value
func (v ButtonMovingAnimation) Ptr() *ButtonMovingAnimation {
	return &v
}

type NullableButtonMovingAnimation struct {
	value *ButtonMovingAnimation
	isSet bool
}

func (v NullableButtonMovingAnimation) Get() *ButtonMovingAnimation {
	return v.value
}

func (v *NullableButtonMovingAnimation) Set(val *ButtonMovingAnimation) {
	v.value = val
	v.isSet = true
}

func (v NullableButtonMovingAnimation) IsSet() bool {
	return v.isSet
}

func (v *NullableButtonMovingAnimation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableButtonMovingAnimation(val *ButtonMovingAnimation) *NullableButtonMovingAnimation {
	return &NullableButtonMovingAnimation{value: val, isSet: true}
}

func (v NullableButtonMovingAnimation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableButtonMovingAnimation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

