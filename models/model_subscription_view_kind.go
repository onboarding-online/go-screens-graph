/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SubscriptionViewKind Variants of subscription view
type SubscriptionViewKind string

// List of SubscriptionViewKind
const (
	SUBSCRIPTIONVIEWKIND_VERTICAL SubscriptionViewKind = "Vertical"
	SUBSCRIPTIONVIEWKIND_HORIZONTAL SubscriptionViewKind = "Horizontal"
	SUBSCRIPTIONVIEWKIND_SUBSCRIPTION_VIEW_KIND1 SubscriptionViewKind = "SubscriptionViewKind1"
	SUBSCRIPTIONVIEWKIND_SUBSCRIPTION_VIEW_KIND2 SubscriptionViewKind = "SubscriptionViewKind2"
	SUBSCRIPTIONVIEWKIND_SUBSCRIPTION_VIEW_KIND3 SubscriptionViewKind = "SubscriptionViewKind3"
	SUBSCRIPTIONVIEWKIND_SUBSCRIPTION_VIEW_KIND4 SubscriptionViewKind = "SubscriptionViewKind4"
	SUBSCRIPTIONVIEWKIND_SUBSCRIPTION_VIEW_KIND5 SubscriptionViewKind = "SubscriptionViewKind5"
)

// All allowed values of SubscriptionViewKind enum
var AllowedSubscriptionViewKindEnumValues = []SubscriptionViewKind{
	"Vertical",
	"Horizontal",
	"SubscriptionViewKind1",
	"SubscriptionViewKind2",
	"SubscriptionViewKind3",
	"SubscriptionViewKind4",
	"SubscriptionViewKind5",
}

func (v *SubscriptionViewKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionViewKind(value)
	for _, existing := range AllowedSubscriptionViewKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionViewKind", value)
}

// NewSubscriptionViewKindFromValue returns a pointer to a valid SubscriptionViewKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionViewKindFromValue(v string) (*SubscriptionViewKind, error) {
	ev := SubscriptionViewKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionViewKind: valid values are %v", v, AllowedSubscriptionViewKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionViewKind) IsValid() bool {
	for _, existing := range AllowedSubscriptionViewKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionViewKind value
func (v SubscriptionViewKind) Ptr() *SubscriptionViewKind {
	return &v
}

type NullableSubscriptionViewKind struct {
	value *SubscriptionViewKind
	isSet bool
}

func (v NullableSubscriptionViewKind) Get() *SubscriptionViewKind {
	return v.value
}

func (v *NullableSubscriptionViewKind) Set(val *SubscriptionViewKind) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionViewKind) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionViewKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionViewKind(val *SubscriptionViewKind) *NullableSubscriptionViewKind {
	return &NullableSubscriptionViewKind{value: val, isSet: true}
}

func (v NullableSubscriptionViewKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionViewKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

