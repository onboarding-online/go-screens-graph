/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ScreenStruct - Screen struct
type ScreenStruct struct {
	CustomScreen *CustomScreen
	ScreenBasicPaywall *ScreenBasicPaywall
	ScreenImageTitleSubtitleList *ScreenImageTitleSubtitleList
	ScreenImageTitleSubtitleMultipleSelectionList *ScreenImageTitleSubtitleMultipleSelectionList
	ScreenImageTitleSubtitlePicker *ScreenImageTitleSubtitlePicker
	ScreenImageTitleSubtitles *ScreenImageTitleSubtitles
	ScreenProgressBarTitle *ScreenProgressBarTitle
	ScreenSlider *ScreenSlider
	ScreenTableMultipleSelection *ScreenTableMultipleSelection
	ScreenTableSingleSelection *ScreenTableSingleSelection
	ScreenTitleSubtitleCalendar *ScreenTitleSubtitleCalendar
	ScreenTitleSubtitleField *ScreenTitleSubtitleField
	ScreenTitleSubtitlePicker *ScreenTitleSubtitlePicker
	ScreenTooltipPermissions *ScreenTooltipPermissions
	ScreenTwoColumnMultipleSelection *ScreenTwoColumnMultipleSelection
	ScreenTwoColumnSingleSelection *ScreenTwoColumnSingleSelection
}

// CustomScreenAsScreenStruct is a convenience function that returns CustomScreen wrapped in ScreenStruct
func CustomScreenAsScreenStruct(v *CustomScreen) ScreenStruct {
	return ScreenStruct{
		CustomScreen: v,
	}
}

// ScreenBasicPaywallAsScreenStruct is a convenience function that returns ScreenBasicPaywall wrapped in ScreenStruct
func ScreenBasicPaywallAsScreenStruct(v *ScreenBasicPaywall) ScreenStruct {
	return ScreenStruct{
		ScreenBasicPaywall: v,
	}
}

// ScreenImageTitleSubtitleListAsScreenStruct is a convenience function that returns ScreenImageTitleSubtitleList wrapped in ScreenStruct
func ScreenImageTitleSubtitleListAsScreenStruct(v *ScreenImageTitleSubtitleList) ScreenStruct {
	return ScreenStruct{
		ScreenImageTitleSubtitleList: v,
	}
}

// ScreenImageTitleSubtitleMultipleSelectionListAsScreenStruct is a convenience function that returns ScreenImageTitleSubtitleMultipleSelectionList wrapped in ScreenStruct
func ScreenImageTitleSubtitleMultipleSelectionListAsScreenStruct(v *ScreenImageTitleSubtitleMultipleSelectionList) ScreenStruct {
	return ScreenStruct{
		ScreenImageTitleSubtitleMultipleSelectionList: v,
	}
}

// ScreenImageTitleSubtitlePickerAsScreenStruct is a convenience function that returns ScreenImageTitleSubtitlePicker wrapped in ScreenStruct
func ScreenImageTitleSubtitlePickerAsScreenStruct(v *ScreenImageTitleSubtitlePicker) ScreenStruct {
	return ScreenStruct{
		ScreenImageTitleSubtitlePicker: v,
	}
}

// ScreenImageTitleSubtitlesAsScreenStruct is a convenience function that returns ScreenImageTitleSubtitles wrapped in ScreenStruct
func ScreenImageTitleSubtitlesAsScreenStruct(v *ScreenImageTitleSubtitles) ScreenStruct {
	return ScreenStruct{
		ScreenImageTitleSubtitles: v,
	}
}

// ScreenProgressBarTitleAsScreenStruct is a convenience function that returns ScreenProgressBarTitle wrapped in ScreenStruct
func ScreenProgressBarTitleAsScreenStruct(v *ScreenProgressBarTitle) ScreenStruct {
	return ScreenStruct{
		ScreenProgressBarTitle: v,
	}
}

// ScreenSliderAsScreenStruct is a convenience function that returns ScreenSlider wrapped in ScreenStruct
func ScreenSliderAsScreenStruct(v *ScreenSlider) ScreenStruct {
	return ScreenStruct{
		ScreenSlider: v,
	}
}

// ScreenTableMultipleSelectionAsScreenStruct is a convenience function that returns ScreenTableMultipleSelection wrapped in ScreenStruct
func ScreenTableMultipleSelectionAsScreenStruct(v *ScreenTableMultipleSelection) ScreenStruct {
	return ScreenStruct{
		ScreenTableMultipleSelection: v,
	}
}

// ScreenTableSingleSelectionAsScreenStruct is a convenience function that returns ScreenTableSingleSelection wrapped in ScreenStruct
func ScreenTableSingleSelectionAsScreenStruct(v *ScreenTableSingleSelection) ScreenStruct {
	return ScreenStruct{
		ScreenTableSingleSelection: v,
	}
}

// ScreenTitleSubtitleCalendarAsScreenStruct is a convenience function that returns ScreenTitleSubtitleCalendar wrapped in ScreenStruct
func ScreenTitleSubtitleCalendarAsScreenStruct(v *ScreenTitleSubtitleCalendar) ScreenStruct {
	return ScreenStruct{
		ScreenTitleSubtitleCalendar: v,
	}
}

// ScreenTitleSubtitleFieldAsScreenStruct is a convenience function that returns ScreenTitleSubtitleField wrapped in ScreenStruct
func ScreenTitleSubtitleFieldAsScreenStruct(v *ScreenTitleSubtitleField) ScreenStruct {
	return ScreenStruct{
		ScreenTitleSubtitleField: v,
	}
}

// ScreenTitleSubtitlePickerAsScreenStruct is a convenience function that returns ScreenTitleSubtitlePicker wrapped in ScreenStruct
func ScreenTitleSubtitlePickerAsScreenStruct(v *ScreenTitleSubtitlePicker) ScreenStruct {
	return ScreenStruct{
		ScreenTitleSubtitlePicker: v,
	}
}

// ScreenTooltipPermissionsAsScreenStruct is a convenience function that returns ScreenTooltipPermissions wrapped in ScreenStruct
func ScreenTooltipPermissionsAsScreenStruct(v *ScreenTooltipPermissions) ScreenStruct {
	return ScreenStruct{
		ScreenTooltipPermissions: v,
	}
}

// ScreenTwoColumnMultipleSelectionAsScreenStruct is a convenience function that returns ScreenTwoColumnMultipleSelection wrapped in ScreenStruct
func ScreenTwoColumnMultipleSelectionAsScreenStruct(v *ScreenTwoColumnMultipleSelection) ScreenStruct {
	return ScreenStruct{
		ScreenTwoColumnMultipleSelection: v,
	}
}

// ScreenTwoColumnSingleSelectionAsScreenStruct is a convenience function that returns ScreenTwoColumnSingleSelection wrapped in ScreenStruct
func ScreenTwoColumnSingleSelectionAsScreenStruct(v *ScreenTwoColumnSingleSelection) ScreenStruct {
	return ScreenStruct{
		ScreenTwoColumnSingleSelection: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScreenStruct) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CustomScreen
	err = newStrictDecoder(data).Decode(&dst.CustomScreen)
	if err == nil {
		jsonCustomScreen, _ := json.Marshal(dst.CustomScreen)
		if string(jsonCustomScreen) == "{}" { // empty struct
			dst.CustomScreen = nil
		} else {
			match++
		}
	} else {
		dst.CustomScreen = nil
	}

	// try to unmarshal data into ScreenBasicPaywall
	err = newStrictDecoder(data).Decode(&dst.ScreenBasicPaywall)
	if err == nil {
		jsonScreenBasicPaywall, _ := json.Marshal(dst.ScreenBasicPaywall)
		if string(jsonScreenBasicPaywall) == "{}" { // empty struct
			dst.ScreenBasicPaywall = nil
		} else {
			match++
		}
	} else {
		dst.ScreenBasicPaywall = nil
	}

	// try to unmarshal data into ScreenImageTitleSubtitleList
	err = newStrictDecoder(data).Decode(&dst.ScreenImageTitleSubtitleList)
	if err == nil {
		jsonScreenImageTitleSubtitleList, _ := json.Marshal(dst.ScreenImageTitleSubtitleList)
		if string(jsonScreenImageTitleSubtitleList) == "{}" { // empty struct
			dst.ScreenImageTitleSubtitleList = nil
		} else {
			match++
		}
	} else {
		dst.ScreenImageTitleSubtitleList = nil
	}

	// try to unmarshal data into ScreenImageTitleSubtitleMultipleSelectionList
	err = newStrictDecoder(data).Decode(&dst.ScreenImageTitleSubtitleMultipleSelectionList)
	if err == nil {
		jsonScreenImageTitleSubtitleMultipleSelectionList, _ := json.Marshal(dst.ScreenImageTitleSubtitleMultipleSelectionList)
		if string(jsonScreenImageTitleSubtitleMultipleSelectionList) == "{}" { // empty struct
			dst.ScreenImageTitleSubtitleMultipleSelectionList = nil
		} else {
			match++
		}
	} else {
		dst.ScreenImageTitleSubtitleMultipleSelectionList = nil
	}

	// try to unmarshal data into ScreenImageTitleSubtitlePicker
	err = newStrictDecoder(data).Decode(&dst.ScreenImageTitleSubtitlePicker)
	if err == nil {
		jsonScreenImageTitleSubtitlePicker, _ := json.Marshal(dst.ScreenImageTitleSubtitlePicker)
		if string(jsonScreenImageTitleSubtitlePicker) == "{}" { // empty struct
			dst.ScreenImageTitleSubtitlePicker = nil
		} else {
			match++
		}
	} else {
		dst.ScreenImageTitleSubtitlePicker = nil
	}

	// try to unmarshal data into ScreenImageTitleSubtitles
	err = newStrictDecoder(data).Decode(&dst.ScreenImageTitleSubtitles)
	if err == nil {
		jsonScreenImageTitleSubtitles, _ := json.Marshal(dst.ScreenImageTitleSubtitles)
		if string(jsonScreenImageTitleSubtitles) == "{}" { // empty struct
			dst.ScreenImageTitleSubtitles = nil
		} else {
			match++
		}
	} else {
		dst.ScreenImageTitleSubtitles = nil
	}

	// try to unmarshal data into ScreenProgressBarTitle
	err = newStrictDecoder(data).Decode(&dst.ScreenProgressBarTitle)
	if err == nil {
		jsonScreenProgressBarTitle, _ := json.Marshal(dst.ScreenProgressBarTitle)
		if string(jsonScreenProgressBarTitle) == "{}" { // empty struct
			dst.ScreenProgressBarTitle = nil
		} else {
			match++
		}
	} else {
		dst.ScreenProgressBarTitle = nil
	}

	// try to unmarshal data into ScreenSlider
	err = newStrictDecoder(data).Decode(&dst.ScreenSlider)
	if err == nil {
		jsonScreenSlider, _ := json.Marshal(dst.ScreenSlider)
		if string(jsonScreenSlider) == "{}" { // empty struct
			dst.ScreenSlider = nil
		} else {
			match++
		}
	} else {
		dst.ScreenSlider = nil
	}

	// try to unmarshal data into ScreenTableMultipleSelection
	err = newStrictDecoder(data).Decode(&dst.ScreenTableMultipleSelection)
	if err == nil {
		jsonScreenTableMultipleSelection, _ := json.Marshal(dst.ScreenTableMultipleSelection)
		if string(jsonScreenTableMultipleSelection) == "{}" { // empty struct
			dst.ScreenTableMultipleSelection = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTableMultipleSelection = nil
	}

	// try to unmarshal data into ScreenTableSingleSelection
	err = newStrictDecoder(data).Decode(&dst.ScreenTableSingleSelection)
	if err == nil {
		jsonScreenTableSingleSelection, _ := json.Marshal(dst.ScreenTableSingleSelection)
		if string(jsonScreenTableSingleSelection) == "{}" { // empty struct
			dst.ScreenTableSingleSelection = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTableSingleSelection = nil
	}

	// try to unmarshal data into ScreenTitleSubtitleCalendar
	err = newStrictDecoder(data).Decode(&dst.ScreenTitleSubtitleCalendar)
	if err == nil {
		jsonScreenTitleSubtitleCalendar, _ := json.Marshal(dst.ScreenTitleSubtitleCalendar)
		if string(jsonScreenTitleSubtitleCalendar) == "{}" { // empty struct
			dst.ScreenTitleSubtitleCalendar = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTitleSubtitleCalendar = nil
	}

	// try to unmarshal data into ScreenTitleSubtitleField
	err = newStrictDecoder(data).Decode(&dst.ScreenTitleSubtitleField)
	if err == nil {
		jsonScreenTitleSubtitleField, _ := json.Marshal(dst.ScreenTitleSubtitleField)
		if string(jsonScreenTitleSubtitleField) == "{}" { // empty struct
			dst.ScreenTitleSubtitleField = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTitleSubtitleField = nil
	}

	// try to unmarshal data into ScreenTitleSubtitlePicker
	err = newStrictDecoder(data).Decode(&dst.ScreenTitleSubtitlePicker)
	if err == nil {
		jsonScreenTitleSubtitlePicker, _ := json.Marshal(dst.ScreenTitleSubtitlePicker)
		if string(jsonScreenTitleSubtitlePicker) == "{}" { // empty struct
			dst.ScreenTitleSubtitlePicker = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTitleSubtitlePicker = nil
	}

	// try to unmarshal data into ScreenTooltipPermissions
	err = newStrictDecoder(data).Decode(&dst.ScreenTooltipPermissions)
	if err == nil {
		jsonScreenTooltipPermissions, _ := json.Marshal(dst.ScreenTooltipPermissions)
		if string(jsonScreenTooltipPermissions) == "{}" { // empty struct
			dst.ScreenTooltipPermissions = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTooltipPermissions = nil
	}

	// try to unmarshal data into ScreenTwoColumnMultipleSelection
	err = newStrictDecoder(data).Decode(&dst.ScreenTwoColumnMultipleSelection)
	if err == nil {
		jsonScreenTwoColumnMultipleSelection, _ := json.Marshal(dst.ScreenTwoColumnMultipleSelection)
		if string(jsonScreenTwoColumnMultipleSelection) == "{}" { // empty struct
			dst.ScreenTwoColumnMultipleSelection = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTwoColumnMultipleSelection = nil
	}

	// try to unmarshal data into ScreenTwoColumnSingleSelection
	err = newStrictDecoder(data).Decode(&dst.ScreenTwoColumnSingleSelection)
	if err == nil {
		jsonScreenTwoColumnSingleSelection, _ := json.Marshal(dst.ScreenTwoColumnSingleSelection)
		if string(jsonScreenTwoColumnSingleSelection) == "{}" { // empty struct
			dst.ScreenTwoColumnSingleSelection = nil
		} else {
			match++
		}
	} else {
		dst.ScreenTwoColumnSingleSelection = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CustomScreen = nil
		dst.ScreenBasicPaywall = nil
		dst.ScreenImageTitleSubtitleList = nil
		dst.ScreenImageTitleSubtitleMultipleSelectionList = nil
		dst.ScreenImageTitleSubtitlePicker = nil
		dst.ScreenImageTitleSubtitles = nil
		dst.ScreenProgressBarTitle = nil
		dst.ScreenSlider = nil
		dst.ScreenTableMultipleSelection = nil
		dst.ScreenTableSingleSelection = nil
		dst.ScreenTitleSubtitleCalendar = nil
		dst.ScreenTitleSubtitleField = nil
		dst.ScreenTitleSubtitlePicker = nil
		dst.ScreenTooltipPermissions = nil
		dst.ScreenTwoColumnMultipleSelection = nil
		dst.ScreenTwoColumnSingleSelection = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScreenStruct)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScreenStruct)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScreenStruct) MarshalJSON() ([]byte, error) {
	if src.CustomScreen != nil {
		return json.Marshal(&src.CustomScreen)
	}

	if src.ScreenBasicPaywall != nil {
		return json.Marshal(&src.ScreenBasicPaywall)
	}

	if src.ScreenImageTitleSubtitleList != nil {
		return json.Marshal(&src.ScreenImageTitleSubtitleList)
	}

	if src.ScreenImageTitleSubtitleMultipleSelectionList != nil {
		return json.Marshal(&src.ScreenImageTitleSubtitleMultipleSelectionList)
	}

	if src.ScreenImageTitleSubtitlePicker != nil {
		return json.Marshal(&src.ScreenImageTitleSubtitlePicker)
	}

	if src.ScreenImageTitleSubtitles != nil {
		return json.Marshal(&src.ScreenImageTitleSubtitles)
	}

	if src.ScreenProgressBarTitle != nil {
		return json.Marshal(&src.ScreenProgressBarTitle)
	}

	if src.ScreenSlider != nil {
		return json.Marshal(&src.ScreenSlider)
	}

	if src.ScreenTableMultipleSelection != nil {
		return json.Marshal(&src.ScreenTableMultipleSelection)
	}

	if src.ScreenTableSingleSelection != nil {
		return json.Marshal(&src.ScreenTableSingleSelection)
	}

	if src.ScreenTitleSubtitleCalendar != nil {
		return json.Marshal(&src.ScreenTitleSubtitleCalendar)
	}

	if src.ScreenTitleSubtitleField != nil {
		return json.Marshal(&src.ScreenTitleSubtitleField)
	}

	if src.ScreenTitleSubtitlePicker != nil {
		return json.Marshal(&src.ScreenTitleSubtitlePicker)
	}

	if src.ScreenTooltipPermissions != nil {
		return json.Marshal(&src.ScreenTooltipPermissions)
	}

	if src.ScreenTwoColumnMultipleSelection != nil {
		return json.Marshal(&src.ScreenTwoColumnMultipleSelection)
	}

	if src.ScreenTwoColumnSingleSelection != nil {
		return json.Marshal(&src.ScreenTwoColumnSingleSelection)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScreenStruct) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CustomScreen != nil {
		return obj.CustomScreen
	}

	if obj.ScreenBasicPaywall != nil {
		return obj.ScreenBasicPaywall
	}

	if obj.ScreenImageTitleSubtitleList != nil {
		return obj.ScreenImageTitleSubtitleList
	}

	if obj.ScreenImageTitleSubtitleMultipleSelectionList != nil {
		return obj.ScreenImageTitleSubtitleMultipleSelectionList
	}

	if obj.ScreenImageTitleSubtitlePicker != nil {
		return obj.ScreenImageTitleSubtitlePicker
	}

	if obj.ScreenImageTitleSubtitles != nil {
		return obj.ScreenImageTitleSubtitles
	}

	if obj.ScreenProgressBarTitle != nil {
		return obj.ScreenProgressBarTitle
	}

	if obj.ScreenSlider != nil {
		return obj.ScreenSlider
	}

	if obj.ScreenTableMultipleSelection != nil {
		return obj.ScreenTableMultipleSelection
	}

	if obj.ScreenTableSingleSelection != nil {
		return obj.ScreenTableSingleSelection
	}

	if obj.ScreenTitleSubtitleCalendar != nil {
		return obj.ScreenTitleSubtitleCalendar
	}

	if obj.ScreenTitleSubtitleField != nil {
		return obj.ScreenTitleSubtitleField
	}

	if obj.ScreenTitleSubtitlePicker != nil {
		return obj.ScreenTitleSubtitlePicker
	}

	if obj.ScreenTooltipPermissions != nil {
		return obj.ScreenTooltipPermissions
	}

	if obj.ScreenTwoColumnMultipleSelection != nil {
		return obj.ScreenTwoColumnMultipleSelection
	}

	if obj.ScreenTwoColumnSingleSelection != nil {
		return obj.ScreenTwoColumnSingleSelection
	}

	// all schemas are nil
	return nil
}

type NullableScreenStruct struct {
	value *ScreenStruct
	isSet bool
}

func (v NullableScreenStruct) Get() *ScreenStruct {
	return v.value
}

func (v *NullableScreenStruct) Set(val *ScreenStruct) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenStruct) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenStruct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenStruct(val *ScreenStruct) *NullableScreenStruct {
	return &NullableScreenStruct{value: val, isSet: true}
}

func (v NullableScreenStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenStruct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


