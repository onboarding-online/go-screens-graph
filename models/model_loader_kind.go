/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// LoaderKind Loader kind
type LoaderKind string

// List of LoaderKind
const (
	LOADERKIND_CIRCLE LoaderKind = "Circle"
	LOADERKIND_LINE LoaderKind = "Line"
	LOADERKIND_LOADER_KIND1 LoaderKind = "LoaderKind1"
	LOADERKIND_LOADER_KIND2 LoaderKind = "LoaderKind2"
	LOADERKIND_LOADER_KIND3 LoaderKind = "LoaderKind3"
	LOADERKIND_LOADER_KIND4 LoaderKind = "LoaderKind4"
	LOADERKIND_LOADER_KIND5 LoaderKind = "LoaderKind5"
)

// All allowed values of LoaderKind enum
var AllowedLoaderKindEnumValues = []LoaderKind{
	"Circle",
	"Line",
	"LoaderKind1",
	"LoaderKind2",
	"LoaderKind3",
	"LoaderKind4",
	"LoaderKind5",
}

func (v *LoaderKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoaderKind(value)
	for _, existing := range AllowedLoaderKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoaderKind", value)
}

// NewLoaderKindFromValue returns a pointer to a valid LoaderKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoaderKindFromValue(v string) (*LoaderKind, error) {
	ev := LoaderKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoaderKind: valid values are %v", v, AllowedLoaderKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoaderKind) IsValid() bool {
	for _, existing := range AllowedLoaderKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoaderKind value
func (v LoaderKind) Ptr() *LoaderKind {
	return &v
}

type NullableLoaderKind struct {
	value *LoaderKind
	isSet bool
}

func (v NullableLoaderKind) Get() *LoaderKind {
	return v.value
}

func (v *NullableLoaderKind) Set(val *LoaderKind) {
	v.value = val
	v.isSet = true
}

func (v NullableLoaderKind) IsSet() bool {
	return v.isSet
}

func (v *NullableLoaderKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoaderKind(val *LoaderKind) *NullableLoaderKind {
	return &NullableLoaderKind{value: val, isSet: true}
}

func (v NullableLoaderKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoaderKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

