/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// NavigationBarElement Enum of all navigation bar elements
type NavigationBarElement string

// List of NavigationBarElement
const (
	NAVIGATIONBARELEMENT_BACK NavigationBarElement = "Back"
	NAVIGATIONBARELEMENT_SKIP NavigationBarElement = "Skip"
	NAVIGATIONBARELEMENT_PAGE_INDICATOR NavigationBarElement = "PageIndicator"
)

// All allowed values of NavigationBarElement enum
var AllowedNavigationBarElementEnumValues = []NavigationBarElement{
	"Back",
	"Skip",
	"PageIndicator",
}

func (v *NavigationBarElement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NavigationBarElement(value)
	for _, existing := range AllowedNavigationBarElementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NavigationBarElement", value)
}

// NewNavigationBarElementFromValue returns a pointer to a valid NavigationBarElement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNavigationBarElementFromValue(v string) (*NavigationBarElement, error) {
	ev := NavigationBarElement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NavigationBarElement: valid values are %v", v, AllowedNavigationBarElementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NavigationBarElement) IsValid() bool {
	for _, existing := range AllowedNavigationBarElementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NavigationBarElement value
func (v NavigationBarElement) Ptr() *NavigationBarElement {
	return &v
}

type NullableNavigationBarElement struct {
	value *NavigationBarElement
	isSet bool
}

func (v NullableNavigationBarElement) Get() *NavigationBarElement {
	return v.value
}

func (v *NullableNavigationBarElement) Set(val *NavigationBarElement) {
	v.value = val
	v.isSet = true
}

func (v NullableNavigationBarElement) IsSet() bool {
	return v.isSet
}

func (v *NullableNavigationBarElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNavigationBarElement(val *NavigationBarElement) *NullableNavigationBarElement {
	return &NullableNavigationBarElement{value: val, isSet: true}
}

func (v NullableNavigationBarElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNavigationBarElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

