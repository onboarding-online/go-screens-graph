/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ActionKind Describe of action kind
type ActionKind string

// List of ActionKind
const (
	ACTIONKIND_PURCHASE ActionKind = "Purchase"
	ACTIONKIND_NEXT ActionKind = "Next"
	ACTIONKIND_BACK ActionKind = "Back"
	ACTIONKIND_FINISH ActionKind = "Finish"
	ACTIONKIND_DUMMY ActionKind = "Dummy"
)

// All allowed values of ActionKind enum
var AllowedActionKindEnumValues = []ActionKind{
	"Purchase",
	"Next",
	"Back",
	"Finish",
	"Dummy",
}

func (v *ActionKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionKind(value)
	for _, existing := range AllowedActionKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionKind", value)
}

// NewActionKindFromValue returns a pointer to a valid ActionKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionKindFromValue(v string) (*ActionKind, error) {
	ev := ActionKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionKind: valid values are %v", v, AllowedActionKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionKind) IsValid() bool {
	for _, existing := range AllowedActionKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionKind value
func (v ActionKind) Ptr() *ActionKind {
	return &v
}

type NullableActionKind struct {
	value *ActionKind
	isSet bool
}

func (v NullableActionKind) Get() *ActionKind {
	return v.value
}

func (v *NullableActionKind) Set(val *ActionKind) {
	v.value = val
	v.isSet = true
}

func (v NullableActionKind) IsSet() bool {
	return v.isSet
}

func (v *NullableActionKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionKind(val *ActionKind) *NullableActionKind {
	return &NullableActionKind{value: val, isSet: true}
}

func (v NullableActionKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

