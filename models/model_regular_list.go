/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RegularList Regular list element
type RegularList struct {
	ItemType RegularListItemType `json:"itemType"`
	// Item rows
	Items []ItemTypeRegular `json:"items"`
	Styles ListBlock `json:"styles"`
	Box Box `json:"box"`
}

// NewRegularList instantiates a new RegularList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegularList(itemType RegularListItemType, items []ItemTypeRegular, styles ListBlock, box Box) *RegularList {
	this := RegularList{}
	this.ItemType = itemType
	this.Items = items
	this.Styles = styles
	this.Box = box
	return &this
}

// NewRegularListWithDefaults instantiates a new RegularList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegularListWithDefaults() *RegularList {
	this := RegularList{}
	return &this
}

// GetItemType returns the ItemType field value
func (o *RegularList) GetItemType() RegularListItemType {
	if o == nil {
		var ret RegularListItemType
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *RegularList) GetItemTypeOk() (*RegularListItemType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *RegularList) SetItemType(v RegularListItemType) {
	o.ItemType = v
}

// GetItems returns the Items field value
func (o *RegularList) GetItems() []ItemTypeRegular {
	if o == nil {
		var ret []ItemTypeRegular
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *RegularList) GetItemsOk() ([]ItemTypeRegular, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *RegularList) SetItems(v []ItemTypeRegular) {
	o.Items = v
}

// GetStyles returns the Styles field value
func (o *RegularList) GetStyles() ListBlock {
	if o == nil {
		var ret ListBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *RegularList) GetStylesOk() (*ListBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *RegularList) SetStyles(v ListBlock) {
	o.Styles = v
}

// GetBox returns the Box field value
func (o *RegularList) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *RegularList) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *RegularList) SetBox(v Box) {
	o.Box = v
}

func (o RegularList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["itemType"] = o.ItemType
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["box"] = o.Box
	}
	return json.Marshal(toSerialize)
}

type NullableRegularList struct {
	value *RegularList
	isSet bool
}

func (v NullableRegularList) Get() *RegularList {
	return v.value
}

func (v *NullableRegularList) Set(val *RegularList) {
	v.value = val
	v.isSet = true
}

func (v NullableRegularList) IsSet() bool {
	return v.isSet
}

func (v *NullableRegularList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegularList(val *RegularList) *NullableRegularList {
	return &NullableRegularList{value: val, isSet: true}
}

func (v NullableRegularList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegularList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


