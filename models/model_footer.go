/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Footer Footer
type Footer struct {
	Button1 *Button `json:"button1,omitempty"`
	Button2 *Button `json:"button2,omitempty"`
	Kind *BasicFooterKind `json:"kind,omitempty"`
	Styles *BasicFooterBlock `json:"styles,omitempty"`
}

// NewFooter instantiates a new Footer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFooter() *Footer {
	this := Footer{}
	return &this
}

// NewFooterWithDefaults instantiates a new Footer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFooterWithDefaults() *Footer {
	this := Footer{}
	return &this
}

// GetButton1 returns the Button1 field value if set, zero value otherwise.
func (o *Footer) GetButton1() Button {
	if o == nil || isNil(o.Button1) {
		var ret Button
		return ret
	}
	return *o.Button1
}

// GetButton1Ok returns a tuple with the Button1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Footer) GetButton1Ok() (*Button, bool) {
	if o == nil || isNil(o.Button1) {
    return nil, false
	}
	return o.Button1, true
}

// HasButton1 returns a boolean if a field has been set.
func (o *Footer) HasButton1() bool {
	if o != nil && !isNil(o.Button1) {
		return true
	}

	return false
}

// SetButton1 gets a reference to the given Button and assigns it to the Button1 field.
func (o *Footer) SetButton1(v Button) {
	o.Button1 = &v
}

// GetButton2 returns the Button2 field value if set, zero value otherwise.
func (o *Footer) GetButton2() Button {
	if o == nil || isNil(o.Button2) {
		var ret Button
		return ret
	}
	return *o.Button2
}

// GetButton2Ok returns a tuple with the Button2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Footer) GetButton2Ok() (*Button, bool) {
	if o == nil || isNil(o.Button2) {
    return nil, false
	}
	return o.Button2, true
}

// HasButton2 returns a boolean if a field has been set.
func (o *Footer) HasButton2() bool {
	if o != nil && !isNil(o.Button2) {
		return true
	}

	return false
}

// SetButton2 gets a reference to the given Button and assigns it to the Button2 field.
func (o *Footer) SetButton2(v Button) {
	o.Button2 = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Footer) GetKind() BasicFooterKind {
	if o == nil || isNil(o.Kind) {
		var ret BasicFooterKind
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Footer) GetKindOk() (*BasicFooterKind, bool) {
	if o == nil || isNil(o.Kind) {
    return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Footer) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given BasicFooterKind and assigns it to the Kind field.
func (o *Footer) SetKind(v BasicFooterKind) {
	o.Kind = &v
}

// GetStyles returns the Styles field value if set, zero value otherwise.
func (o *Footer) GetStyles() BasicFooterBlock {
	if o == nil || isNil(o.Styles) {
		var ret BasicFooterBlock
		return ret
	}
	return *o.Styles
}

// GetStylesOk returns a tuple with the Styles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Footer) GetStylesOk() (*BasicFooterBlock, bool) {
	if o == nil || isNil(o.Styles) {
    return nil, false
	}
	return o.Styles, true
}

// HasStyles returns a boolean if a field has been set.
func (o *Footer) HasStyles() bool {
	if o != nil && !isNil(o.Styles) {
		return true
	}

	return false
}

// SetStyles gets a reference to the given BasicFooterBlock and assigns it to the Styles field.
func (o *Footer) SetStyles(v BasicFooterBlock) {
	o.Styles = &v
}

func (o Footer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Button1) {
		toSerialize["button1"] = o.Button1
	}
	if !isNil(o.Button2) {
		toSerialize["button2"] = o.Button2
	}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !isNil(o.Styles) {
		toSerialize["styles"] = o.Styles
	}
	return json.Marshal(toSerialize)
}

type NullableFooter struct {
	value *Footer
	isSet bool
}

func (v NullableFooter) Get() *Footer {
	return v.value
}

func (v *NullableFooter) Set(val *Footer) {
	v.value = val
	v.isSet = true
}

func (v NullableFooter) IsSet() bool {
	return v.isSet
}

func (v *NullableFooter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFooter(val *Footer) *NullableFooter {
	return &NullableFooter{value: val, isSet: true}
}

func (v NullableFooter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFooter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


