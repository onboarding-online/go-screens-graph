/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// BlurKind Blur kind
type BlurKind string

// List of BlurKind
const (
	BLURKIND_BLUR_KIND1 BlurKind = "BlurKind1"
	BLURKIND_BLUR_KIND2 BlurKind = "BlurKind2"
	BLURKIND_BLUR_KIND3 BlurKind = "BlurKind3"
	BLURKIND_BLUR_KIND4 BlurKind = "BlurKind4"
	BLURKIND_BLUR_KIND5 BlurKind = "BlurKind5"
	BLURKIND_BLUR_KIND6 BlurKind = "BlurKind6"
	BLURKIND_BLUR_KIND7 BlurKind = "BlurKind7"
	BLURKIND_BLUR_KIND8 BlurKind = "BlurKind8"
	BLURKIND_BLUR_KIND9 BlurKind = "BlurKind9"
	BLURKIND_BLUR_KIND10 BlurKind = "BlurKind10"
)

// All allowed values of BlurKind enum
var AllowedBlurKindEnumValues = []BlurKind{
	"BlurKind1",
	"BlurKind2",
	"BlurKind3",
	"BlurKind4",
	"BlurKind5",
	"BlurKind6",
	"BlurKind7",
	"BlurKind8",
	"BlurKind9",
	"BlurKind10",
}

func (v *BlurKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlurKind(value)
	for _, existing := range AllowedBlurKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlurKind", value)
}

// NewBlurKindFromValue returns a pointer to a valid BlurKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlurKindFromValue(v string) (*BlurKind, error) {
	ev := BlurKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlurKind: valid values are %v", v, AllowedBlurKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlurKind) IsValid() bool {
	for _, existing := range AllowedBlurKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlurKind value
func (v BlurKind) Ptr() *BlurKind {
	return &v
}

type NullableBlurKind struct {
	value *BlurKind
	isSet bool
}

func (v NullableBlurKind) Get() *BlurKind {
	return v.value
}

func (v *NullableBlurKind) Set(val *BlurKind) {
	v.value = val
	v.isSet = true
}

func (v NullableBlurKind) IsSet() bool {
	return v.isSet
}

func (v *NullableBlurKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlurKind(val *BlurKind) *NullableBlurKind {
	return &NullableBlurKind{value: val, isSet: true}
}

func (v NullableBlurKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlurKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

