/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// CloseAppearance Close button appearance kind
type CloseAppearance string

// List of CloseAppearance
const (
	CLOSEAPPEARANCE_VISIBLE CloseAppearance = "visible"
	CLOSEAPPEARANCE_VISIBLE_AFTER_TIMER CloseAppearance = "visibleAfterTimer"
)

// All allowed values of CloseAppearance enum
var AllowedCloseAppearanceEnumValues = []CloseAppearance{
	"visible",
	"visibleAfterTimer",
}

func (v *CloseAppearance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloseAppearance(value)
	for _, existing := range AllowedCloseAppearanceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloseAppearance", value)
}

// NewCloseAppearanceFromValue returns a pointer to a valid CloseAppearance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloseAppearanceFromValue(v string) (*CloseAppearance, error) {
	ev := CloseAppearance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloseAppearance: valid values are %v", v, AllowedCloseAppearanceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloseAppearance) IsValid() bool {
	for _, existing := range AllowedCloseAppearanceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloseAppearance value
func (v CloseAppearance) Ptr() *CloseAppearance {
	return &v
}

type NullableCloseAppearance struct {
	value *CloseAppearance
	isSet bool
}

func (v NullableCloseAppearance) Get() *CloseAppearance {
	return v.value
}

func (v *NullableCloseAppearance) Set(val *CloseAppearance) {
	v.value = val
	v.isSet = true
}

func (v NullableCloseAppearance) IsSet() bool {
	return v.isSet
}

func (v *NullableCloseAppearance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloseAppearance(val *CloseAppearance) *NullableCloseAppearance {
	return &NullableCloseAppearance{value: val, isSet: true}
}

func (v NullableCloseAppearance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloseAppearance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

