/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// RegularListItemType Combination of fields for regular list item
type RegularListItemType string

// List of RegularListItemType
const (
	REGULARLISTITEMTYPE_IMAGE_TITLE RegularListItemType = "ImageTitle"
	REGULARLISTITEMTYPE_TITLE_IMAGE RegularListItemType = "TitleImage"
)

// All allowed values of RegularListItemType enum
var AllowedRegularListItemTypeEnumValues = []RegularListItemType{
	"ImageTitle",
	"TitleImage",
}

func (v *RegularListItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegularListItemType(value)
	for _, existing := range AllowedRegularListItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegularListItemType", value)
}

// NewRegularListItemTypeFromValue returns a pointer to a valid RegularListItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegularListItemTypeFromValue(v string) (*RegularListItemType, error) {
	ev := RegularListItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegularListItemType: valid values are %v", v, AllowedRegularListItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegularListItemType) IsValid() bool {
	for _, existing := range AllowedRegularListItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegularListItemType value
func (v RegularListItemType) Ptr() *RegularListItemType {
	return &v
}

type NullableRegularListItemType struct {
	value *RegularListItemType
	isSet bool
}

func (v NullableRegularListItemType) Get() *RegularListItemType {
	return v.value
}

func (v *NullableRegularListItemType) Set(val *RegularListItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegularListItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegularListItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegularListItemType(val *RegularListItemType) *NullableRegularListItemType {
	return &NullableRegularListItemType{value: val, isSet: true}
}

func (v NullableRegularListItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegularListItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

