/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// SubscriptionList Subscriptions list element
type SubscriptionList struct {
	SubscriptionViewKind *SubscriptionViewKind `json:"subscriptionViewKind,omitempty"`
	ItemType SubscriptionListItemType `json:"itemType"`
	// Item rows
	Items []ItemTypeSubscription `json:"items"`
	Styles SubscriptionListBlock `json:"styles"`
	SelectedBlock SelectedSubscriptionListItemBlock `json:"selectedBlock"`
	Box Box `json:"box"`
}

// NewSubscriptionList instantiates a new SubscriptionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionList(itemType SubscriptionListItemType, items []ItemTypeSubscription, styles SubscriptionListBlock, selectedBlock SelectedSubscriptionListItemBlock, box Box) *SubscriptionList {
	this := SubscriptionList{}
	this.ItemType = itemType
	this.Items = items
	this.Styles = styles
	this.SelectedBlock = selectedBlock
	this.Box = box
	return &this
}

// NewSubscriptionListWithDefaults instantiates a new SubscriptionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionListWithDefaults() *SubscriptionList {
	this := SubscriptionList{}
	return &this
}

// GetSubscriptionViewKind returns the SubscriptionViewKind field value if set, zero value otherwise.
func (o *SubscriptionList) GetSubscriptionViewKind() SubscriptionViewKind {
	if o == nil || isNil(o.SubscriptionViewKind) {
		var ret SubscriptionViewKind
		return ret
	}
	return *o.SubscriptionViewKind
}

// GetSubscriptionViewKindOk returns a tuple with the SubscriptionViewKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionList) GetSubscriptionViewKindOk() (*SubscriptionViewKind, bool) {
	if o == nil || isNil(o.SubscriptionViewKind) {
    return nil, false
	}
	return o.SubscriptionViewKind, true
}

// HasSubscriptionViewKind returns a boolean if a field has been set.
func (o *SubscriptionList) HasSubscriptionViewKind() bool {
	if o != nil && !isNil(o.SubscriptionViewKind) {
		return true
	}

	return false
}

// SetSubscriptionViewKind gets a reference to the given SubscriptionViewKind and assigns it to the SubscriptionViewKind field.
func (o *SubscriptionList) SetSubscriptionViewKind(v SubscriptionViewKind) {
	o.SubscriptionViewKind = &v
}

// GetItemType returns the ItemType field value
func (o *SubscriptionList) GetItemType() SubscriptionListItemType {
	if o == nil {
		var ret SubscriptionListItemType
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *SubscriptionList) GetItemTypeOk() (*SubscriptionListItemType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *SubscriptionList) SetItemType(v SubscriptionListItemType) {
	o.ItemType = v
}

// GetItems returns the Items field value
func (o *SubscriptionList) GetItems() []ItemTypeSubscription {
	if o == nil {
		var ret []ItemTypeSubscription
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SubscriptionList) GetItemsOk() ([]ItemTypeSubscription, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SubscriptionList) SetItems(v []ItemTypeSubscription) {
	o.Items = v
}

// GetStyles returns the Styles field value
func (o *SubscriptionList) GetStyles() SubscriptionListBlock {
	if o == nil {
		var ret SubscriptionListBlock
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *SubscriptionList) GetStylesOk() (*SubscriptionListBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Styles, true
}

// SetStyles sets field value
func (o *SubscriptionList) SetStyles(v SubscriptionListBlock) {
	o.Styles = v
}

// GetSelectedBlock returns the SelectedBlock field value
func (o *SubscriptionList) GetSelectedBlock() SelectedSubscriptionListItemBlock {
	if o == nil {
		var ret SelectedSubscriptionListItemBlock
		return ret
	}

	return o.SelectedBlock
}

// GetSelectedBlockOk returns a tuple with the SelectedBlock field value
// and a boolean to check if the value has been set.
func (o *SubscriptionList) GetSelectedBlockOk() (*SelectedSubscriptionListItemBlock, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SelectedBlock, true
}

// SetSelectedBlock sets field value
func (o *SubscriptionList) SetSelectedBlock(v SelectedSubscriptionListItemBlock) {
	o.SelectedBlock = v
}

// GetBox returns the Box field value
func (o *SubscriptionList) GetBox() Box {
	if o == nil {
		var ret Box
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *SubscriptionList) GetBoxOk() (*Box, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Box, true
}

// SetBox sets field value
func (o *SubscriptionList) SetBox(v Box) {
	o.Box = v
}

func (o SubscriptionList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SubscriptionViewKind) {
		toSerialize["subscriptionViewKind"] = o.SubscriptionViewKind
	}
	if true {
		toSerialize["itemType"] = o.ItemType
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["styles"] = o.Styles
	}
	if true {
		toSerialize["selectedBlock"] = o.SelectedBlock
	}
	if true {
		toSerialize["box"] = o.Box
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionList struct {
	value *SubscriptionList
	isSet bool
}

func (v NullableSubscriptionList) Get() *SubscriptionList {
	return v.value
}

func (v *NullableSubscriptionList) Set(val *SubscriptionList) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionList) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionList(val *SubscriptionList) *NullableSubscriptionList {
	return &NullableSubscriptionList{value: val, isSet: true}
}

func (v NullableSubscriptionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


