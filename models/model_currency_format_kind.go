/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// CurrencyFormatKind Currency format kind
type CurrencyFormatKind string

// List of CurrencyFormatKind
const (
	CURRENCYFORMATKIND_NONE CurrencyFormatKind = "None"
	CURRENCYFORMATKIND_DECIMAL CurrencyFormatKind = "Decimal"
	CURRENCYFORMATKIND_CURRENCY CurrencyFormatKind = "Currency"
	CURRENCYFORMATKIND_PERCENT CurrencyFormatKind = "Percent"
	CURRENCYFORMATKIND_SCIENTIFIC CurrencyFormatKind = "Scientific"
	CURRENCYFORMATKIND_SPELL_OUT CurrencyFormatKind = "SpellOut"
	CURRENCYFORMATKIND_ORDINAL CurrencyFormatKind = "Ordinal"
	CURRENCYFORMATKIND_CURRENCY_ISO_CODE CurrencyFormatKind = "CurrencyISOCode"
	CURRENCYFORMATKIND_CURRENCY_PLURAL CurrencyFormatKind = "CurrencyPlural"
	CURRENCYFORMATKIND_CURRENCY_ACCOUNTING CurrencyFormatKind = "CurrencyAccounting"
)

// All allowed values of CurrencyFormatKind enum
var AllowedCurrencyFormatKindEnumValues = []CurrencyFormatKind{
	"None",
	"Decimal",
	"Currency",
	"Percent",
	"Scientific",
	"SpellOut",
	"Ordinal",
	"CurrencyISOCode",
	"CurrencyPlural",
	"CurrencyAccounting",
}

func (v *CurrencyFormatKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrencyFormatKind(value)
	for _, existing := range AllowedCurrencyFormatKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrencyFormatKind", value)
}

// NewCurrencyFormatKindFromValue returns a pointer to a valid CurrencyFormatKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyFormatKindFromValue(v string) (*CurrencyFormatKind, error) {
	ev := CurrencyFormatKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrencyFormatKind: valid values are %v", v, AllowedCurrencyFormatKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrencyFormatKind) IsValid() bool {
	for _, existing := range AllowedCurrencyFormatKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CurrencyFormatKind value
func (v CurrencyFormatKind) Ptr() *CurrencyFormatKind {
	return &v
}

type NullableCurrencyFormatKind struct {
	value *CurrencyFormatKind
	isSet bool
}

func (v NullableCurrencyFormatKind) Get() *CurrencyFormatKind {
	return v.value
}

func (v *NullableCurrencyFormatKind) Set(val *CurrencyFormatKind) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyFormatKind) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyFormatKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyFormatKind(val *CurrencyFormatKind) *NullableCurrencyFormatKind {
	return &NullableCurrencyFormatKind{value: val, isSet: true}
}

func (v NullableCurrencyFormatKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyFormatKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

