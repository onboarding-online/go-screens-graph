/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MultipleSelectionListItemType Combination of fields for multiple selection list item
type MultipleSelectionListItemType string

// List of MultipleSelectionListItemType
const (
	MULTIPLESELECTIONLISTITEMTYPE_TITLE_SUBTITLE_CHECKBOX MultipleSelectionListItemType = "TitleSubtitleCheckbox"
	MULTIPLESELECTIONLISTITEMTYPE_CHECKBOX_TITLE_SUBTITLE MultipleSelectionListItemType = "CheckboxTitleSubtitle"
	MULTIPLESELECTIONLISTITEMTYPE_TITLE_SUBTITLE MultipleSelectionListItemType = "TitleSubtitle"
	MULTIPLESELECTIONLISTITEMTYPE_TITLE MultipleSelectionListItemType = "Title"
	MULTIPLESELECTIONLISTITEMTYPE_IMAGE_TITLE_SUBTITLE_CHECKBOX MultipleSelectionListItemType = "ImageTitleSubtitleCheckbox"
	MULTIPLESELECTIONLISTITEMTYPE_CHECKBOX_TITLE_SUBTITLE_IMAGE MultipleSelectionListItemType = "CheckboxTitleSubtitleImage"
	MULTIPLESELECTIONLISTITEMTYPE_IMAGE_TITLE_CHECKBOX MultipleSelectionListItemType = "ImageTitleCheckbox"
	MULTIPLESELECTIONLISTITEMTYPE_CHECKBOX_TITLE_IMAGE MultipleSelectionListItemType = "CheckboxTitleImage"
	MULTIPLESELECTIONLISTITEMTYPE_TITLE_CHECKBOX MultipleSelectionListItemType = "TitleCheckbox"
	MULTIPLESELECTIONLISTITEMTYPE_CHECKBOX_TITLE MultipleSelectionListItemType = "CheckboxTitle"
	MULTIPLESELECTIONLISTITEMTYPE_TITLE_IMAGE MultipleSelectionListItemType = "TitleImage"
	MULTIPLESELECTIONLISTITEMTYPE_IMAGE_TITLE MultipleSelectionListItemType = "ImageTitle"
	MULTIPLESELECTIONLISTITEMTYPE_IMAGE_TITLE_SUBTITLE MultipleSelectionListItemType = "ImageTitleSubtitle"
	MULTIPLESELECTIONLISTITEMTYPE_TITLE_SUBTITLE_IMAGE MultipleSelectionListItemType = "TitleSubtitleImage"
)

// All allowed values of MultipleSelectionListItemType enum
var AllowedMultipleSelectionListItemTypeEnumValues = []MultipleSelectionListItemType{
	"TitleSubtitleCheckbox",
	"CheckboxTitleSubtitle",
	"TitleSubtitle",
	"Title",
	"ImageTitleSubtitleCheckbox",
	"CheckboxTitleSubtitleImage",
	"ImageTitleCheckbox",
	"CheckboxTitleImage",
	"TitleCheckbox",
	"CheckboxTitle",
	"TitleImage",
	"ImageTitle",
	"ImageTitleSubtitle",
	"TitleSubtitleImage",
}

func (v *MultipleSelectionListItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MultipleSelectionListItemType(value)
	for _, existing := range AllowedMultipleSelectionListItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MultipleSelectionListItemType", value)
}

// NewMultipleSelectionListItemTypeFromValue returns a pointer to a valid MultipleSelectionListItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMultipleSelectionListItemTypeFromValue(v string) (*MultipleSelectionListItemType, error) {
	ev := MultipleSelectionListItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MultipleSelectionListItemType: valid values are %v", v, AllowedMultipleSelectionListItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MultipleSelectionListItemType) IsValid() bool {
	for _, existing := range AllowedMultipleSelectionListItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MultipleSelectionListItemType value
func (v MultipleSelectionListItemType) Ptr() *MultipleSelectionListItemType {
	return &v
}

type NullableMultipleSelectionListItemType struct {
	value *MultipleSelectionListItemType
	isSet bool
}

func (v NullableMultipleSelectionListItemType) Get() *MultipleSelectionListItemType {
	return v.value
}

func (v *NullableMultipleSelectionListItemType) Set(val *MultipleSelectionListItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleSelectionListItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleSelectionListItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleSelectionListItemType(val *MultipleSelectionListItemType) *NullableMultipleSelectionListItemType {
	return &NullableMultipleSelectionListItemType{value: val, isSet: true}
}

func (v NullableMultipleSelectionListItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleSelectionListItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

