/*
Onboarding online screens graph models

Onboarding online screens graph models and interfaces

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ScreenTwoColumnSingleSelectionAllOf Screen two column table single selection - Title/Subtitle/Selection list
type ScreenTwoColumnSingleSelectionAllOf struct {
	TwoColumnSingleSelectionDescription string `json:"twoColumnSingleSelectionDescription"`
	Media *Media `json:"media,omitempty"`
	Title Text `json:"title"`
	Subtitle Text `json:"subtitle"`
	List TwoColumnSingleSelectionList `json:"list"`
}

// NewScreenTwoColumnSingleSelectionAllOf instantiates a new ScreenTwoColumnSingleSelectionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScreenTwoColumnSingleSelectionAllOf(twoColumnSingleSelectionDescription string, title Text, subtitle Text, list TwoColumnSingleSelectionList) *ScreenTwoColumnSingleSelectionAllOf {
	this := ScreenTwoColumnSingleSelectionAllOf{}
	this.TwoColumnSingleSelectionDescription = twoColumnSingleSelectionDescription
	this.Title = title
	this.Subtitle = subtitle
	this.List = list
	return &this
}

// NewScreenTwoColumnSingleSelectionAllOfWithDefaults instantiates a new ScreenTwoColumnSingleSelectionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScreenTwoColumnSingleSelectionAllOfWithDefaults() *ScreenTwoColumnSingleSelectionAllOf {
	this := ScreenTwoColumnSingleSelectionAllOf{}
	return &this
}

// GetTwoColumnSingleSelectionDescription returns the TwoColumnSingleSelectionDescription field value
func (o *ScreenTwoColumnSingleSelectionAllOf) GetTwoColumnSingleSelectionDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TwoColumnSingleSelectionDescription
}

// GetTwoColumnSingleSelectionDescriptionOk returns a tuple with the TwoColumnSingleSelectionDescription field value
// and a boolean to check if the value has been set.
func (o *ScreenTwoColumnSingleSelectionAllOf) GetTwoColumnSingleSelectionDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TwoColumnSingleSelectionDescription, true
}

// SetTwoColumnSingleSelectionDescription sets field value
func (o *ScreenTwoColumnSingleSelectionAllOf) SetTwoColumnSingleSelectionDescription(v string) {
	o.TwoColumnSingleSelectionDescription = v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *ScreenTwoColumnSingleSelectionAllOf) GetMedia() Media {
	if o == nil || isNil(o.Media) {
		var ret Media
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScreenTwoColumnSingleSelectionAllOf) GetMediaOk() (*Media, bool) {
	if o == nil || isNil(o.Media) {
    return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *ScreenTwoColumnSingleSelectionAllOf) HasMedia() bool {
	if o != nil && !isNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given Media and assigns it to the Media field.
func (o *ScreenTwoColumnSingleSelectionAllOf) SetMedia(v Media) {
	o.Media = &v
}

// GetTitle returns the Title field value
func (o *ScreenTwoColumnSingleSelectionAllOf) GetTitle() Text {
	if o == nil {
		var ret Text
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ScreenTwoColumnSingleSelectionAllOf) GetTitleOk() (*Text, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ScreenTwoColumnSingleSelectionAllOf) SetTitle(v Text) {
	o.Title = v
}

// GetSubtitle returns the Subtitle field value
func (o *ScreenTwoColumnSingleSelectionAllOf) GetSubtitle() Text {
	if o == nil {
		var ret Text
		return ret
	}

	return o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value
// and a boolean to check if the value has been set.
func (o *ScreenTwoColumnSingleSelectionAllOf) GetSubtitleOk() (*Text, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Subtitle, true
}

// SetSubtitle sets field value
func (o *ScreenTwoColumnSingleSelectionAllOf) SetSubtitle(v Text) {
	o.Subtitle = v
}

// GetList returns the List field value
func (o *ScreenTwoColumnSingleSelectionAllOf) GetList() TwoColumnSingleSelectionList {
	if o == nil {
		var ret TwoColumnSingleSelectionList
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *ScreenTwoColumnSingleSelectionAllOf) GetListOk() (*TwoColumnSingleSelectionList, bool) {
	if o == nil {
    return nil, false
	}
	return &o.List, true
}

// SetList sets field value
func (o *ScreenTwoColumnSingleSelectionAllOf) SetList(v TwoColumnSingleSelectionList) {
	o.List = v
}

func (o ScreenTwoColumnSingleSelectionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["twoColumnSingleSelectionDescription"] = o.TwoColumnSingleSelectionDescription
	}
	if !isNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["subtitle"] = o.Subtitle
	}
	if true {
		toSerialize["list"] = o.List
	}
	return json.Marshal(toSerialize)
}

type NullableScreenTwoColumnSingleSelectionAllOf struct {
	value *ScreenTwoColumnSingleSelectionAllOf
	isSet bool
}

func (v NullableScreenTwoColumnSingleSelectionAllOf) Get() *ScreenTwoColumnSingleSelectionAllOf {
	return v.value
}

func (v *NullableScreenTwoColumnSingleSelectionAllOf) Set(val *ScreenTwoColumnSingleSelectionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenTwoColumnSingleSelectionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenTwoColumnSingleSelectionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenTwoColumnSingleSelectionAllOf(val *ScreenTwoColumnSingleSelectionAllOf) *NullableScreenTwoColumnSingleSelectionAllOf {
	return &NullableScreenTwoColumnSingleSelectionAllOf{value: val, isSet: true}
}

func (v NullableScreenTwoColumnSingleSelectionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenTwoColumnSingleSelectionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


